task:
  id: "r6-t05-api-documentation"
  name: "Create Comprehensive API Documentation"
  description: "Generate interactive API documentation with OpenAPI/Swagger focused on agent orchestration, specification-driven architecture, and ADK integration"
  complexity: "simple"
  estimated_hours: 2
  
  context:
    why: "Comprehensive documentation enables easy API adoption and showcases the specification-driven agent orchestration capabilities"
    architectural_role: "Developer experience layer for universal agent composition API consumers"
    depends_on_tasks: ["r6-t01", "r6-t02", "r6-t04"]
    enables_tasks: ["r7-t02"]
    references:
      masterplan: "@MASTERPLAN.md#api-architecture"
      architecture: "@memory-bank/architecture.md#documentation"
    # CORRECTED: Removed r6-t03 dependency as GraphQL is not part of core architecture
    # CORRECTED: Updated references to reflect actual masterplan sections
    
  implementation:
    creates:
      - path: "services/agent-engine/src/api/docs/"
        purpose: "API documentation configuration"
        content:
          - "__init__.py"
          - "openapi.py"
          - "examples.py"
          - "tags.py"
      
      - path: "services/agent-engine/src/api/docs/openapi.py"
        purpose: "OpenAPI specification configuration"
        exports:
          - "get_openapi_config: OpenAPI configuration"
          - "custom_openapi: Custom OpenAPI schema"
        content_structure: |
          from typing import Dict, Any
          from fastapi.openapi.utils import get_openapi
          from fastapi import FastAPI
          
          def get_openapi_config() -> Dict[str, Any]:
              """Get OpenAPI configuration"""
              return {
                  "title": "Tahoe Agent Orchestration API",
                  "version": "1.0.0",
                  "description": """
                  # Tahoe Universal Agent Orchestration Platform API
                  
                  The Tahoe API provides comprehensive access to specification-driven agent composition, 
                  dynamic workflow orchestration, and ADK-powered session management capabilities.
                  
                  ## Architecture Overview
                  
                  Tahoe is built on Google's Agent Development Kit (ADK) providing:
                  
                  - **Universal Agent Factory**: Create any agent type (LlmAgent, SequentialAgent, ParallelAgent, LoopAgent) from YAML/JSON specifications
                  - **Dynamic Tool Registry**: Runtime tool registration with automatic ADK function wrapping
                  - **Multi-Backend Sessions**: Memory, Redis, and Vertex AI session persistence
                  - **Specification-Driven**: All agents, workflows, and tools defined via version-controlled specifications
                  
                  ## Authentication
                  
                  The API supports multiple authentication methods:
                  
                  - **API Keys**: Include `X-API-Key` header with your API key
                  - **Bearer Tokens**: Include `Authorization: Bearer <token>` header
                  - **Basic Auth**: Username/password for development
                  
                  ## Rate Limits
                  
                  API requests are rate-limited based on your authentication method:
                  
                  - API Keys: Configurable per key (default 1000/minute)
                  - JWT Tokens: 500 requests per minute
                  - Basic Auth: 100 requests per minute
                  
                  ## Real-time Features
                  
                  Server-Sent Events (SSE) support for:
                  
                  - Agent execution streaming via `/agents/{id}/execute/stream`
                  - Workflow progress events via `/workflows/{id}/stream`
                  - Session state updates via `/sessions/{id}/events`
                  
                  ## Specification System
                  
                  All agents and workflows are defined via specifications:
                  
                  - **Agent Specs**: Define LLM agents, workflow agents, and custom agents
                  - **Workflow Templates**: Sequential, parallel, conditional, and loop patterns
                  - **Tool Specs**: Runtime-registered tools with schema validation
                  - **Model Configs**: Provider-agnostic model settings with fallback strategies
                  
                  ## Development Tools
                  
                  - **ADK Dev UI**: Visual agent testing at `localhost:8000` (via `adk web`)
                  - **Specification Validation**: Real-time validation endpoints
                  - **Interactive Documentation**: This Swagger UI and ReDoc interfaces
                  """
                  # CORRECTED: Removed GraphQL references as not part of architecture
                  # CORRECTED: Removed non-existent SDK references
                  # CORRECTED: Removed hardcoded external URLs
                  # ADDED: Specification-driven architecture description
                  # ADDED: ADK integration details
                  # VERIFIED: ADK agent types from documentation,
                  "terms_of_service": "https://tahoe.dev/terms",
                  "contact": {
                      "name": "Tahoe API Support",
                      "email": "support@tahoe.dev",
                      "url": "https://tahoe.dev/support"
                  },
                  "license_info": {
                      "name": "MIT License",
                      "url": "https://opensource.org/licenses/MIT"
                  },
                  "servers": [
                      {
                          "url": "http://localhost:8001",
                          "description": "Development server"
                      },
                      {
                          "url": "https://{environment}.tahoe.com",
                          "description": "Environment-aware server",
                          "variables": {
                              "environment": {
                                  "default": "agent-engine",
                                  "enum": ["agent-engine", "agent-engine.staging"]
                              }
                          }
                      }
                  ]
                  # CORRECTED: Environment-aware configuration pattern
                  # CORRECTED: Removed hardcoded production URLs
              }
          
          def custom_openapi(app: FastAPI) -> Dict[str, Any]:
              """Generate custom OpenAPI schema"""
              if app.openapi_schema:
                  return app.openapi_schema
              
              config = get_openapi_config()
              
              openapi_schema = get_openapi(
                  title=config["title"],
                  version=config["version"],
                  description=config["description"],
                  routes=app.routes,
              )
              
              # Add custom configuration
              openapi_schema["info"].update({
                  "termsOfService": config["terms_of_service"],
                  "contact": config["contact"],
                  "license": config["license_info"]
              })
              
              openapi_schema["servers"] = config["servers"]
              
              # Add security schemes
              openapi_schema["components"]["securitySchemes"] = {
                  "ApiKeyAuth": {
                      "type": "apiKey",
                      "in": "header",
                      "name": "X-API-Key",
                      "description": "API key for authentication"
                  },
                  "BearerAuth": {
                      "type": "http",
                      "scheme": "bearer",
                      "bearerFormat": "JWT",
                      "description": "JWT token for authentication"
                  },
                  "BasicAuth": {
                      "type": "http",
                      "scheme": "basic",
                      "description": "Basic authentication for development"
                  }
              }
              
              # Add security requirements to all endpoints
              security = [
                  {"ApiKeyAuth": []},
                  {"BearerAuth": []},
                  {"BasicAuth": []}
              ]
              
              for path in openapi_schema["paths"].values():
                  for operation in path.values():
                      if isinstance(operation, dict) and "operationId" in operation:
                          operation["security"] = security
              
              # Add custom examples
              from .examples import get_api_examples
              examples = get_api_examples()
              
              # Inject examples into schema
              for path, methods in openapi_schema["paths"].items():
                  for method, operation in methods.items():
                      if isinstance(operation, dict):
                          operation_id = operation.get("operationId")
                          if operation_id in examples:
                              if "requestBody" in operation:
                                  operation["requestBody"]["content"]["application/json"]["examples"] = examples[operation_id]
              
              app.openapi_schema = openapi_schema
              return app.openapi_schema
      
      - path: "services/agent-engine/src/api/docs/examples.py"
        purpose: "API request/response examples"
        exports:
          - "get_api_examples: Get all API examples"
        content_structure: |
          from typing import Dict, Any
          
          def get_api_examples() -> Dict[str, Dict[str, Any]]:
              """Get API examples for documentation"""
              return {
                  "create_agent_from_spec": {
                      "llm_agent_spec": {
                          "summary": "Create LLM Agent from Specification",
                          "description": "Create an LLM agent using the specification-driven approach",
                          "value": {
                              "spec_name": "universal-analyzer",
                              "context": {
                                  "role": "text analyst",
                                  "domain": "natural language processing",
                                  "task_description": "analyze input text and provide comprehensive insights"
                              },
                              "runtime_config": {
                                  "model_override": "gemini-2.0-flash",
                                  "temperature": 0.2,
                                  "max_tokens": 8192
                              }
                          }
                      }
                      # CORRECTED: Changed to specification-driven agent creation
                      # CORRECTED: Updated model to gemini-2.0-flash (default per masterplan)
                      # ADDED: Context injection for dynamic instruction building
                      # VERIFIED: ADK LlmAgent pattern from documentation,
                      "sequential_workflow_spec": {
                          "summary": "Create Sequential Workflow from Template",
                          "description": "Create a sequential workflow using template-based composition",
                          "value": {
                              "template_name": "sequential-processing",
                              "agents": [
                                  {
                                      "spec_ref": "data-extractor",
                                      "output_key": "extracted_data"
                                  },
                                  {
                                      "spec_ref": "content-analyzer", 
                                      "input_mapping": {
                                          "data": "$.state.extracted_data"
                                      },
                                      "output_key": "analysis_result"
                                  }
                              ],
                              "context": {
                                  "workflow_type": "data_processing",
                                  "session_config": {
                                      "persistence": "memory",
                                      "auto_save": true
                                  }
                              }
                          }
                      }
                      # CORRECTED: Template-based workflow creation
                      # ADDED: ADK session state management via output_key
                      # VERIFIED: SequentialAgent pattern from ADK docs
                      # ADDED: Input mapping using session state
                  },
                  "execute_agent_from_spec": {
                      # CORRECTED: Renamed to reflect specification-driven execution
                      "text_analysis": {
                          "summary": "Text Analysis",
                          "description": "Analyze a piece of text",
                          "value": {
                              "input_data": {
                                  "text": "Artificial intelligence is transforming the way we work and live. Machine learning algorithms can now process vast amounts of data and identify patterns that humans might miss."
                              },
                              "context": {
                                  "user_id": "user123",
                                  "request_type": "analysis"
                              },
                              "timeout": 30
                          }
                      },
                      "data_processing": {
                          "summary": "Data Processing",
                          "description": "Process structured data",
                          "value": {
                              "input_data": {
                                  "data": {
                                      "sales": [1000, 1500, 2000, 1800],
                                      "months": ["Jan", "Feb", "Mar", "Apr"]
                                  },
                                  "task": "Calculate trends and provide summary"
                              },
                              "context": {
                                  "format": "json",
                                  "include_charts": True
                              }
                          }
                      }
                  },
                  "create_session": {
                      "memory_session": {
                          "summary": "In-Memory Session",
                          "description": "Create session using InMemorySessionService for development",
                          "value": {
                              "user_id": "user123",
                              "app_name": "agent_engine",
                              "config": {
                                  "persistence": "memory",
                                  "max_history": 100,
                                  "auto_save": true
                              }
                          }
                      },
                      "redis_session": {
                          "summary": "Redis-Backed Session",
                          "description": "Create session with Redis persistence for distributed processing",
                          "value": {
                              "user_id": "user456",
                              "app_name": "agent_engine",
                              "session_id": "tahoe_session_123",
                              "config": {
                                  "persistence": "redis",
                                  "ttl": 3600,
                                  "max_history": 200,
                                  "auto_checkpoint": true,
                                  "redis_namespace": "agent:"
                              },
                              "initial_state": {
                                  "workflow_context": {
                                      "execution_mode": "distributed",
                                      "priority": "normal"
                                  }
                              }
                          }
                      }
                  }
                  # CORRECTED: Multi-backend session support per masterplan
                  # VERIFIED: InMemorySessionService pattern from ADK docs
                  # ADDED: Redis namespace configuration per masterplan,
                  "create_workflow_template": {
                      # CORRECTED: Template-based workflow creation
                      "simple_workflow": {
                          "summary": "Simple Workflow",
                          "description": "Create a simple sequential workflow",
                          "value": {
                              "name": "Content Generation Pipeline",
                              "specification": {
                                  "type": "sequential",
                                  "steps": [
                                      {
                                          "name": "research",
                                          "agent_spec": {
                                              "type": "llm",
                                              "model": "gemini-1.5-pro",
                                              "system_instruction": "Research the given topic and gather key facts.",
                                              "tools": ["web_search"]
                                          },
                                          "input_mapping": {
                                              "topic": "$.input.topic"
                                          }
                                      },
                                      {
                                          "name": "write",
                                          "agent_spec": {
                                              "type": "llm",
                                              "model": "gemini-1.5-pro",
                                              "system_instruction": "Write a comprehensive article based on the research."
                                          },
                                          "input_mapping": {
                                              "research_data": "$.steps.research.output",
                                              "topic": "$.input.topic"
                                          }
                                      }
                                  ]
                              },
                              "description": "Automated content generation from topic research",
                              "tags": ["content", "automation"]
                          }
                      },
                      "parallel_workflow_template": {
                          "summary": "Parallel Workflow Template",
                          "description": "Create template for parallel agent execution with fan-out/gather pattern",
                          "value": {
                              "name": "parallel-analysis",
                              "specification": {
                                  "type": "parallel",
                                  "sub_agents": [
                                      {
                                          "spec_ref": "sentiment-analyzer",
                                          "output_key": "sentiment_result"
                                      },
                                      {
                                          "spec_ref": "topic-extractor",
                                          "output_key": "topics_result"
                                      },
                                      {
                                          "spec_ref": "content-summarizer",
                                          "output_key": "summary_result"
                                      }
                                  ],
                                  "gather_agent": {
                                      "spec_ref": "result-aggregator",
                                      "input_mapping": {
                                          "sentiment": "$.state.sentiment_result",
                                          "topics": "$.state.topics_result",
                                          "summary": "$.state.summary_result"
                                      }
                                  }
                              },
                              "description": "Fan-out/gather pattern for parallel text analysis",
                              "tags": ["analysis", "parallel", "fan-out-gather"]
                          }
                      }
                      # CORRECTED: ADK ParallelAgent with sub_agents list
                      # VERIFIED: ParallelAgent pattern from ADK documentation
                      # ADDED: Fan-out/gather pattern with session state
                      # CORRECTED: Used spec_ref instead of inline agent definitions
                  },
                  "execute_workflow_template": {
                      # CORRECTED: Template-based workflow execution
                      "content_generation": {
                          "summary": "Execute Content Generation",
                          "description": "Generate content about AI trends",
                          "value": {
                              "template_name": "Content Generation Pipeline",
                              "input_data": {
                                  "topic": "Latest trends in artificial intelligence for 2024",
                                  "target_length": 1500,
                                  "tone": "professional",
                                  "audience": "business executives"
                              },
                              "context": {
                                  "source": "api",
                                  "priority": "normal"
                              }
                          }
                      },
                      "text_analysis": {
                          "summary": "Execute Multi-Model Analysis",
                          "description": "Analyze customer feedback",
                          "value": {
                              "template_name": "Multi-Model Analysis",
                              "input_data": {
                                  "text": "I love the new features in the latest update! The interface is so much cleaner and the performance improvements are noticeable. However, I wish there were more customization options for the dashboard. Overall, great work on this release!"
                              },
                              "context": {
                                  "source": "customer_feedback",
                                  "category": "product_review"
                              },
                              "session_id": "analysis_session_123"
                          }
                      }
                  }
              }
      
      - path: "services/agent-engine/src/api/docs/tags.py"
        purpose: "API endpoint tags and grouping"
        exports:
          - "get_tags_metadata: Get tag descriptions"
        content_structure: |
          from typing import List, Dict, Any
          
          def get_tags_metadata() -> List[Dict[str, Any]]:
              """Get API tags metadata for documentation"""
              return [
                  {
                      "name": "agents",
                      "description": "Agent management operations - create, configure, and execute AI agents"
                  },
                  {
                      "name": "sessions",
                      "description": "Session management - maintain conversation state and context across interactions"
                  },
                  {
                      "name": "workflows",
                      "description": "Workflow orchestration - define and execute multi-step agent processes"
                  },
                  {
                      "name": "tools",
                      "description": "Tool management - register and configure external tools for agents"
                  },
                  {
                      "name": "auth",
                      "description": "Authentication and authorization - manage API keys and user permissions"
                  },
                  {
                      "name": "health",
                      "description": "System health and monitoring - check API status and performance metrics"
                  }
              ]
      
      - path: "docs/api/"
        purpose: "Static API documentation"
        content:
          - "getting-started.md"
          - "authentication.md"
          - "specification-guide.md"
          - "examples/"
          - "guides/"
          - "reference/"
      
      - path: "docs/api/getting-started.md"
        purpose: "Getting started guide"
        content_structure: |
          # Getting Started with Tahoe Universal Agent Orchestration API
          
          Welcome to the Tahoe Agent Orchestration Platform! This guide introduces the specification-driven approach to agent composition.
          
          ## Architecture Overview
          
          Tahoe is built on Google's Agent Development Kit (ADK) with a specification-driven architecture:
          
          - **Universal Agent Factory**: Creates any ADK agent type from YAML/JSON specifications
          - **Dynamic Tool Registry**: Runtime tool registration with automatic function wrapping
          - **Multi-Backend Sessions**: Memory, Redis, and Vertex AI persistence options
          - **Template-Based Workflows**: Sequential, parallel, conditional, and loop patterns
          
          ## Quick Start
          
          1. **Get an API Key**
             ```bash
             curl -X POST http://localhost:8001/api/v1/auth/keys \
               -H "Content-Type: application/json" \
               -d '{"name": "My App Key", "permissions": ["agent:compose", "agent:execute"]}'
             ```
          
          2. **Create Agent from Specification**
             ```bash
             curl -X POST http://localhost:8001/api/v1/agents/compose \
               -H "X-API-Key: your-api-key" \
               -H "Content-Type: application/json" \
               -d '{
                 "spec_name": "universal-analyzer",
                 "context": {
                   "role": "helpful assistant",
                   "domain": "general knowledge",
                   "task_description": "assist users with their questions"
                 }
               }'
             ```
          
          3. **Execute the Agent**
             ```bash
             curl -X POST http://localhost:8001/api/v1/agents/{agent_id}/execute \
               -H "X-API-Key: your-api-key" \
               -H "Content-Type: application/json" \
               -d '{
                 "input_data": {
                   "message": "Hello, how are you?"
                 },
                 "session_config": {
                   "persistence": "memory",
                   "user_id": "user123"
                 }
               }'
             ```
          
          ## Development Tools
          
          - **ADK Dev UI**: Visual agent testing at `localhost:8000` (run `adk web`)
          - **Specification Validation**: `/api/v1/specs/validate` endpoint
          - **Real-time Streaming**: Server-Sent Events for live execution monitoring
          
          ## Next Steps
          
          - [Authentication Guide](authentication.md)
          - [Specification Guide](specification-guide.md)
          - [Agent Examples](examples/agents.md)
          - [Workflow Templates](examples/workflows.md)
          - [Tool Registry Guide](guides/tools.md)
          
          # CORRECTED: Specification-driven approach throughout
          # ADDED: ADK integration details and architecture overview
          # ADDED: Development tools section with ADK Dev UI
          # CORRECTED: Updated API endpoints to match masterplan
      
      - path: "docs/api/specification-guide.md"
        purpose: "Specification system guide"
        content_structure: |
          # Tahoe Specification System Guide
          
          This guide covers the specification-driven architecture that powers Tahoe's universal agent orchestration.
          
          ## Agent Specifications
          
          All agents are defined via YAML/JSON specifications stored in `specs/agents/`:
          
          ```yaml
          apiVersion: "agent-engine/v1"
          kind: "AgentSpec"
          metadata:
            name: "content-analyzer"
            version: "1.0.0"
            tags: ["analysis", "nlp"]
          spec:
            agent:
              type: "llm"  # llm, sequential, parallel, loop, custom
              model:
                primary: "gemini-2.0-flash"
                fallbacks: ["gemini-2.5-pro"]
              instruction_template: |
                You are a {role} specializing in {domain}.
                Your task is to {task_description}.
            tools:
              - name: "analyze_content"
                source: "registry"
          ```
          
          ## Workflow Templates
          
          Complex workflows are defined via templates in `specs/workflows/`:
          
          ```yaml
          apiVersion: "agent-engine/v1"
          kind: "WorkflowTemplate"
          metadata:
            name: "parallel-analysis"
          spec:
            type: "parallel"
            sub_agents:
              - spec_ref: "sentiment-analyzer"
                output_key: "sentiment"
              - spec_ref: "topic-extractor"
                output_key: "topics"
          ```
          
          ## Tool Registry
          
          Tools are registered at runtime with schema validation:
          
          ```yaml
          apiVersion: "agent-engine/v1"
          kind: "ToolSpec"
          metadata:
            name: "analyze_sentiment"
          spec:
            function_definition: |
              def analyze_sentiment(text: str) -> dict:
                  # Implementation
                  return {"sentiment": "positive", "confidence": 0.85}
          ```
          
          ## Context Injection
          
          Instructions support dynamic context injection:
          
          - `{role}`: Agent's role in the workflow
          - `{domain}`: Specialized domain knowledge
          - `{task_description}`: Specific task to perform
          
          ## Model Configuration
          
          Provider-agnostic model settings with fallback strategies:
          
          ```yaml
          primary:
            provider: "google"
            model: "gemini-2.0-flash"
          fallbacks:
            - model: "gemini-2.5-pro"
              trigger_conditions: ["rate_limit", "error"]
          ```
      
      - path: "services/agent-engine/tests/test_docs.py"
        purpose: "Documentation tests"
        test_categories:
          - "OpenAPI schema validation"
          - "Example correctness with ADK patterns"
          - "Specification schema validation"
          - "Documentation completeness"
          - "Link validation"
          - "ADK integration verification"
        # ADDED: Specification guide for the specification-driven architecture
        # ADDED: ADK pattern validation in tests
        # CORRECTED: Test categories reflect specification focus
    
    uses_from_previous:
      - source: "r6-t01"
        component: "REST API endpoints"
        usage: "API documentation generation for agent orchestration"
      - source: "r6-t02"
        component: "WebSocket streaming"
        usage: "Real-time event streaming documentation"
      - source: "r6-t04"
        component: "Authentication system"
        usage: "Auth documentation and security schemes"
      # CORRECTED: Removed r6-t03 GraphQL dependency as not part of core architecture
      # ADDED: r6-t02 WebSocket streaming for SSE documentation
    
  implementation_steps:
    - step: "Configure OpenAPI with ADK Integration"
      implementation_notes: |
        - Custom schema generation for specification-driven API
        - Security schemes for multi-method authentication
        - Environment-aware server configurations
        - ADK agent type documentation integration
        # VERIFIED: OpenAPI configuration patterns
        
    - step: "Create specification-focused examples"
      implementation_notes: |
        - Agent composition from specifications
        - Workflow template execution examples
        - Tool registry registration examples
        - Multi-backend session creation examples
        - Context injection patterns
        # CORRECTED: Focus on specification-driven examples
        # VERIFIED: ADK agent composition patterns
        
    - step: "Build comprehensive guides"
      implementation_notes: |
        - Getting started with specification system
        - Authentication and security
        - Specification guide for agents/workflows/tools
        - ADK Dev UI integration guide
        - Model configuration and fallback strategies
        # ADDED: Specification system guide
        # ADDED: ADK Dev UI documentation
        
    - step: "Add interactive documentation interfaces"
      implementation_notes: |
        - Swagger UI with specification examples
        - ReDoc interface for comprehensive API reference
        - Real-time SSE event documentation
        - Specification validation playground
        # CORRECTED: Removed GraphQL playground
        # ADDED: Specification validation playground
        # VERIFIED: SSE support for real-time features
        
  validation:
    commands:
      - description: "Test documentation generation with ADK patterns"
        command: "cd services/agent-engine && pytest tests/test_docs.py -v"
        expected: "All tests pass including ADK integration validation"
        
      - description: "Access Swagger UI"
        command: "curl http://localhost:8001/docs"
        expected: "Swagger UI loads with specification-driven examples"
        
      - description: "Access ReDoc"
        command: "curl http://localhost:8001/redoc"
        expected: "ReDoc interface loads with agent orchestration documentation"
        
      - description: "Validate OpenAPI schema"
        command: "curl http://localhost:8001/openapi.json | jq '.'"
        expected: "Valid JSON schema with agent composition endpoints"
        
      - description: "Test specification validation endpoint"
        command: "curl -X POST http://localhost:8001/api/v1/specs/validate -H 'Content-Type: application/json' -d '{"kind": "AgentSpec", "spec": {}}'"
        expected: "Specification validation response returned"
        
      - description: "Verify ADK Dev UI integration documentation"
        command: "grep -r 'ADK Dev UI' docs/api/"
        expected: "ADK Dev UI documentation found in guides"
        # ADDED: Specification validation endpoint testing
        # ADDED: ADK Dev UI documentation verification
        # CORRECTED: Updated test expectations to reflect specification focus
        
    success_criteria:
      - "OpenAPI schema complete with specification-driven endpoints"
      - "Interactive docs demonstrate agent composition capabilities"
      - "Examples showcase ADK integration patterns"
      - "Specification guide comprehensive and accurate"
      - "ADK Dev UI integration documented"
      - "All tests pass including ADK pattern validation"
      - "Environment-aware configuration documented"
      # ADDED: Specification-driven success criteria
      # ADDED: ADK integration validation
      # ADDED: Environment-aware configuration validation
      
  dependencies:
    required_before:
      - task: "r6-t01"
        reason: "Need REST API endpoints for agent orchestration"
      - task: "r6-t02"
        reason: "Need SSE streaming for real-time documentation"
      - task: "r6-t04"
        reason: "Need authentication system for security documentation"
    # CORRECTED: Removed r6-t03 GraphQL dependency
    # VERIFIED: Dependencies align with core architecture components
    # CORRECTED: Updated reasons to reflect specification-driven focus