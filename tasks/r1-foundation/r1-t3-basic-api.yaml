task:
  id: "r1-t3-basic-api"
  name: "Build Core API Framework with Basic Orchestrator"
  session_size: "Complete FastAPI structure with authentication and orchestrator skeleton"
  
  context:
    why: "API gateway for all agent service interactions with basic workflow skeleton"
    integrates_with: ["database-schema", "orchestrator", "redis-cache"]
    references:
      - "masterplan API implementation (lines 946-1388)"
      - "masterplan orchestration engine (lines 305-686)"
      - "roadmap phase 1 API framework requirements"
    
  build_spec:
    creates:
      - "services/agent-engine/src/orchestrator.py (skeleton)"
      - "services/agent-engine/src/auth.py"
      - "services/agent-engine/src/models/api.py"
      - "services/agent-engine/src/services/health.py"
      - "services/agent-engine/tests/test_api.py"
      - "services/agent-engine/tests/fixtures/sample_interaction.json"
    modifies:
      - "src/main.py (complete API implementation)"
      - "src/config.py (add service configuration)"
      - "requirements.txt (add redis, auth dependencies)"
    uses:
      - "FastAPI with middleware"
      - "Redis for caching"
      - "Service token authentication"
      - "Pydantic for validation"
    
  implementation_guide:
    start_with: "Expand main.py with all core endpoints"
    core_logic:
      - "POST /analyze endpoint (returns placeholder for now)"
      - "GET /analysis/{id} to retrieve results"
      - "GET /health with dependency checks"
      - "GET /agents/templates to list agents"
      - "Service token authentication middleware"
      - "TahoeOrchestrator skeleton class"
      - "Redis connection for future caching"
      - "Comprehensive error handling"
    connects_to:
      - "PostgreSQL via Prisma client"
      - "Redis for session management"
      - "Orchestrator for analysis workflow"
    keeps_simple:
      - "Orchestrator just creates/updates analysis records"
      - "No actual agent execution yet"
      - "Basic auth - just token validation"
      - "No complex caching - just connection"
      - "Returns mock results for testing"
    
  local_validation:
    run_commands:
      - "cd services/agent-engine"
      - "export SERVICE_TOKEN=test-token-123"
      - "uvicorn src.main:app --reload --port 8001"
      - "curl -H 'Authorization: Bearer test-token-123' http://localhost:8001/agents/templates"
    verify_endpoints:
      - "POST /analyze accepts request and returns analysis_id"
      - "GET /analysis/{id} retrieves analysis status"
      - "GET /health checks postgres and redis"
      - "GET /agents/templates lists seeded agents"
      - "Unauthorized requests return 401"
    check_functionality:
      - "Analysis records created in database"
      - "Redis connection established"
      - "Error responses properly formatted"
      - "Swagger docs show all endpoints"
      - "Authentication blocks invalid tokens"
    
  session_notes:
    context_critical:
      - "All endpoints return proper HTTP status codes"
      - "Use Depends() for auth on protected endpoints"
      - "Orchestrator is skeleton - just DB operations"
      - "Keep responses consistent with API models"
    remember_for_later:
      - "Analysis workflow will be expanded in R2"
      - "Agent execution added in R2"
      - "Caching patterns established here"
      - "Error handling patterns for all endpoints"

  implementation_checklist:
    - "Complete main.py with all endpoints"
    - "Create API request/response models"
    - "Implement service token authentication"
    - "Build orchestrator skeleton class"
    - "Connect Redis for future use"
    - "Add health check service"
    - "Create sample interaction fixture"
    - "Write basic API tests"
    - "Verify all endpoints with curl"

  api_endpoints:
    - "POST /analyze - Submit interaction for analysis"
    - "GET /analysis/{id} - Get analysis results"
    - "GET /agents/templates - List agent templates"
    - "POST /agents/templates - Create agent template"
    - "GET /scorecards - List scorecards"
    - "POST /scorecards - Create scorecard"
    - "GET /health - Service health check"
    - "GET /metrics - Basic metrics (optional)"

  placeholder_logic:
    analyze_endpoint: |
      # Create analysis record with "processing" status
      # Store in database with trace_id
      # Return immediately with analysis_id
      # (Actual processing in R2)
    
    orchestrator_skeleton: |
      # Initialize database and cache connections
      # analyze_interaction method creates DB record
      # Returns mock AnalysisResult for now
      # Real implementation in R2