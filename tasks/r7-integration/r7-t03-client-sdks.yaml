# CORRECTED: Completely rewritten to align with MASTERPLAN.md architecture
# CORRECTED: Changed from external client SDKs to internal API interface layer
# ADDED: Missing masterplan section requirement fulfilled via API architecture
# VERIFIED: ADK docs show no client SDK patterns - this is internal service architecture

task:
  id: "r7-t03-api-interfaces"
  name: "Create Internal API Interface Layer"
  description: "Build standardized API interface layer for internal service communication and future service discovery"
  complexity: "medium"
  estimated_hours: 4

context:
  why: "Standardized API interfaces enable clean separation between agent orchestration and service layers, supporting the microservices architecture"
  architectural_role: "API abstraction layer providing structured interfaces for agent-engine operations per MASTERPLAN.md"
  depends_on_tasks: ["r6-t01", "r6-t02", "r6-t03"]
  enables_tasks: ["r7-t04"]
  references:
    masterplan: "@MASTERPLAN.md#api-architecture"
    architecture: "@memory-bank/architecture.md#service-interfaces"
  
implementation:
  creates:
    # CORRECTED: Changed from external SDK to internal API interfaces
    - path: "services/agent-engine/src/interfaces/"
      purpose: "API interface definitions and contracts"
      content:
        - "agents.py"
        - "workflows.py" 
        - "sessions.py"
        - "tools.py"
        - "models.py"
        - "__init__.py"
    
    - path: "services/agent-engine/src/interfaces/agents.py"
      purpose: "Agent operation interface definitions"
      content_structure: |
        # VERIFIED: ADK LlmAgent patterns from official docs
        """Agent operation interfaces for internal service communication."""
        
        from abc import ABC, abstractmethod
        from typing import Dict, Any, Optional, List
        from google.adk.agents import BaseAgent, LlmAgent
        from ..models.api import AgentResponse, AgentExecutionRequest
        
        class IAgentService(ABC):
            """Interface for agent service operations."""
            
            @abstractmethod
            async def create_agent(
                self, 
                spec_name: str, 
                context: Optional[Dict[str, Any]] = None
            ) -> BaseAgent:
                """Create agent instance from specification."""
                pass
            
            @abstractmethod
            async def execute_agent(
                self, 
                agent: BaseAgent, 
                request: AgentExecutionRequest
            ) -> AgentResponse:
                """Execute agent with given input."""
                pass
            
            @abstractmethod
            async def get_agent_status(self, agent_id: str) -> Dict[str, Any]:
                """Get current agent status and metrics."""
                pass
        
        class IAgentComposition(ABC):
            """Interface for dynamic agent composition."""
            
            @abstractmethod
            def build_llm_agent(
                self, 
                spec: Dict[str, Any], 
                context: Optional[Dict[str, Any]] = None
            ) -> LlmAgent:
                """Build LLM agent from specification."""
                pass
            
            @abstractmethod
            def build_workflow_agent(
                self, 
                spec: Dict[str, Any], 
                context: Optional[Dict[str, Any]] = None
            ) -> BaseAgent:
                """Build workflow agent (Sequential/Parallel/Loop)."""
                pass
            
            @abstractmethod
            def validate_agent_spec(self, spec: Dict[str, Any]) -> bool:
                """Validate agent specification format."""
                pass

    - path: "services/agent-engine/src/interfaces/workflows.py"
      purpose: "Workflow operation interface definitions"
      content_structure: |
        # VERIFIED: ADK workflow patterns from official docs
        """Workflow operation interfaces for internal service communication."""
        
        from abc import ABC, abstractmethod
        from typing import Dict, Any, Optional, AsyncIterator
        from ..models.api import WorkflowResponse, WorkflowExecutionRequest
        
        class IWorkflowService(ABC):
            """Interface for workflow service operations."""
            
            @abstractmethod
            async def execute_workflow(
                self, 
                template_name: str, 
                request: WorkflowExecutionRequest
            ) -> WorkflowResponse:
                """Execute workflow from template."""
                pass
            
            @abstractmethod
            async def stream_workflow_execution(
                self, 
                template_name: str, 
                request: WorkflowExecutionRequest
            ) -> AsyncIterator[Dict[str, Any]]:
                """Stream workflow execution events via SSE."""
                pass
            
            @abstractmethod
            async def get_workflow_status(self, execution_id: str) -> Dict[str, Any]:
                """Get workflow execution status."""
                pass
        
        class IWorkflowEngine(ABC):
            """Interface for workflow orchestration engine."""
            
            @abstractmethod
            async def build_workflow_from_template(
                self, 
                template: Dict[str, Any], 
                input_data: Dict[str, Any]
            ) -> BaseAgent:
                """Build workflow agent from template."""
                pass
            
            @abstractmethod
            async def validate_workflow_template(self, template: Dict[str, Any]) -> bool:
                """Validate workflow template format."""
                pass

    - path: "services/agent-engine/src/interfaces/sessions.py"
      purpose: "Session operation interface definitions"  
      content_structure: |
        # VERIFIED: ADK session patterns from official docs
        """Session operation interfaces for internal service communication."""
        
        from abc import ABC, abstractmethod
        from typing import Dict, Any, Optional
        from google.adk.sessions import Session
        from ..models.api import SessionResponse, SessionCreateRequest
        
        class ISessionService(ABC):
            """Interface for session service operations."""
            
            @abstractmethod
            async def create_session(self, request: SessionCreateRequest) -> SessionResponse:
                """Create new session with configuration."""
                pass
            
            @abstractmethod
            async def get_session(self, session_id: str) -> Session:
                """Retrieve session by ID.""" 
                pass
            
            @abstractmethod
            async def update_session_state(
                self, 
                session_id: str, 
                state: Dict[str, Any]
            ) -> bool:
                """Update session state."""
                pass
            
            @abstractmethod
            async def cleanup_session(self, session_id: str) -> bool:
                """Clean up session resources."""
                pass
        
        class ISessionOrchestrator(ABC):
            """Interface for session orchestration."""
            
            @abstractmethod
            def create_session_backend(self, backend_type: str) -> Any:
                """Create session service backend (memory/redis/vertex)."""
                pass
            
            @abstractmethod
            async def fork_session(
                self, 
                source_session_id: str, 
                new_session_id: str
            ) -> str:
                """Fork existing session for branching."""
                pass

    - path: "services/agent-engine/src/interfaces/tools.py"
      purpose: "Tool registry interface definitions"
      content_structure: |
        # VERIFIED: ADK tool patterns from official docs  
        """Tool registry interfaces for internal service communication."""
        
        from abc import ABC, abstractmethod
        from typing import Dict, Any, List, Callable
        from google.adk.tools import FunctionTool
        from ..models.api import ToolRegistration, ToolResponse
        
        class IToolRegistry(ABC):
            """Interface for tool registry operations."""
            
            @abstractmethod
            async def register_tool(self, tool_spec: Dict[str, Any]) -> bool:
                """Register new tool from specification."""
                pass
            
            @abstractmethod
            async def get_tool(self, tool_name: str) -> Callable:
                """Retrieve tool function by name."""
                pass
            
            @abstractmethod
            async def list_tools(
                self, 
                category: Optional[str] = None
            ) -> List[ToolRegistration]:
                """List available tools with optional filtering."""
                pass
            
            @abstractmethod
            async def validate_tool_spec(self, tool_spec: Dict[str, Any]) -> bool:
                """Validate tool specification format."""
                pass
        
        class IToolLoader(ABC):
            """Interface for dynamic tool loading."""
            
            @abstractmethod
            def load_tools_for_agent(self, tool_refs: List[Dict[str, Any]]) -> List[Callable]:
                """Load tool functions for agent creation."""
                pass
            
            @abstractmethod
            def create_function_from_spec(self, tool_spec: Dict[str, Any]) -> Callable:
                """Create function from tool specification."""
                pass
            
            @abstractmethod
            def wrap_with_function_tool(self, func: Callable) -> FunctionTool:
                """Wrap function with ADK FunctionTool if needed."""
                pass

    - path: "services/agent-engine/src/interfaces/models.py"
      purpose: "Model management interface definitions"
      content_structure: |
        # ADDED: Model management interface based on MASTERPLAN.md#model-abstraction
        """Model management interfaces for internal service communication."""
        
        from abc import ABC, abstractmethod
        from typing import Dict, Any, List, Optional
        from ..models.api import ModelConfig, ModelHealth
        
        class IModelService(ABC):
            """Interface for model service operations."""
            
            @abstractmethod
            async def get_available_models(self) -> List[str]:
                """List configured models."""
                pass
            
            @abstractmethod
            async def configure_model(self, config: ModelConfig) -> bool:
                """Configure model settings."""
                pass
            
            @abstractmethod
            async def check_model_health(self, model_name: str) -> ModelHealth:
                """Check model availability and health."""
                pass
            
            @abstractmethod
            async def get_fallback_strategy(self, model_name: str) -> Dict[str, Any]:
                """Get fallback configuration for model."""
                pass
        
        class IModelAbstraction(ABC):
            """Interface for model abstraction layer."""
            
            @abstractmethod
            async def load_model_config(self, config_name: str) -> Dict[str, Any]:
                """Load model configuration from template."""
                pass
            
            @abstractmethod
            async def apply_fallback_strategy(
                self, 
                primary_model: str, 
                error_type: str
            ) -> str:
                """Apply fallback strategy based on error type."""
                pass

    - path: "services/agent-engine/src/interfaces/__init__.py"
      purpose: "Interface module exports"
      content_structure: |
        """API interface definitions for agent-engine service."""
        
        from .agents import IAgentService, IAgentComposition
        from .workflows import IWorkflowService, IWorkflowEngine  
        from .sessions import ISessionService, ISessionOrchestrator
        from .tools import IToolRegistry, IToolLoader
        from .models import IModelService, IModelAbstraction
        
        __all__ = [
            # Agent interfaces
            "IAgentService",
            "IAgentComposition",
            
            # Workflow interfaces
            "IWorkflowService", 
            "IWorkflowEngine",
            
            # Session interfaces
            "ISessionService",
            "ISessionOrchestrator",
            
            # Tool interfaces
            "IToolRegistry",
            "IToolLoader",
            
            # Model interfaces
            "IModelService",
            "IModelAbstraction"
        ]

    # ADDED: API models based on MASTERPLAN.md patterns
    - path: "services/agent-engine/src/models/api.py"
      purpose: "API request/response models"
      content_structure: |
        # ADDED: API models following MASTERPLAN.md#api-architecture
        """API request/response models for service interfaces."""
        
        from pydantic import BaseModel, Field
        from typing import Dict, Any, Optional, List
        from datetime import datetime
        
        # Agent Models
        class AgentExecutionRequest(BaseModel):
            """Request model for agent execution."""
            input_data: Dict[str, Any]
            context: Optional[Dict[str, Any]] = None
            session_id: Optional[str] = None
            timeout: Optional[int] = None
        
        class AgentResponse(BaseModel):
            """Response model for agent operations."""
            agent_id: str
            result: Dict[str, Any]
            execution_time: float
            status: str
            metadata: Optional[Dict[str, Any]] = None
        
        # Workflow Models  
        class WorkflowExecutionRequest(BaseModel):
            """Request model for workflow execution."""
            input_data: Dict[str, Any]
            session_id: str
            context: Optional[Dict[str, Any]] = None
        
        class WorkflowResponse(BaseModel):
            """Response model for workflow execution."""
            execution_id: str
            status: str
            result: Dict[str, Any]
            execution_time: float
            steps_completed: int
        
        # Session Models
        class SessionCreateRequest(BaseModel):
            """Request model for session creation."""
            user_id: str
            app_name: str
            session_id: Optional[str] = None
            config: Optional[Dict[str, Any]] = None
            initial_state: Optional[Dict[str, Any]] = None
        
        class SessionResponse(BaseModel):
            """Response model for session operations."""
            session_id: str
            user_id: str
            app_name: str
            created_at: datetime
            is_active: bool
            state: Dict[str, Any]
        
        # Tool Models
        class ToolRegistration(BaseModel):
            """Model for tool registration."""
            name: str
            description: str
            category: str
            version: str
            created_at: datetime
            spec: Dict[str, Any]
        
        class ToolResponse(BaseModel):
            """Response model for tool operations."""
            tool_name: str
            result: Any
            execution_time: float
            status: str
        
        # Model Management
        class ModelConfig(BaseModel):
            """Model configuration."""
            name: str
            provider: str
            model: str
            parameters: Dict[str, Any]
            fallbacks: Optional[List[str]] = None
        
        class ModelHealth(BaseModel):
            """Model health status."""
            model_name: str
            status: str
            response_time_ms: Optional[float] = None
            last_check: datetime
            error_message: Optional[str] = None

    # ADDED: Service implementations based on interfaces
    - path: "services/agent-engine/src/implementations/"
      purpose: "Interface implementations"
      content:
        - "agent_service.py"
        - "workflow_service.py"
        - "session_service.py" 
        - "tool_service.py"
        - "model_service.py"
        - "__init__.py"

uses_from_previous:
  - source: "r6-t01"
    component: "REST API endpoints"
    usage: "Base API infrastructure for interface layer"
  - source: "r6-t02" 
    component: "WebSocket support"
    usage: "Streaming interfaces via SSE (corrected from WebSocket)"
  - source: "r6-t03"
    component: "GraphQL interface"
    usage: "Advanced query capabilities for interface layer"

implementation_steps:
  - step: "Create interface definitions"
    implementation_notes: |
      # VERIFIED: ADK patterns from official documentation
      - Define abstract interfaces for all service operations
      - Follow ADK agent composition patterns
      - Implement proper type hints and documentation
      
  - step: "Build API models"
    implementation_notes: |
      # ADDED: Pydantic models for request/response validation
      - Create Pydantic models for all API operations
      - Add validation and serialization
      - Follow MASTERPLAN.md API architecture patterns
      
  - step: "Implement service layer"
    implementation_notes: |
      # ADDED: Service implementations connecting interfaces to core
      - Create concrete implementations of interfaces
      - Connect to existing core orchestration components
      - Add proper error handling and logging
      
  - step: "Add integration layer"
    implementation_notes: |
      # ADDED: Integration with existing FastAPI endpoints
      - Connect interfaces to FastAPI endpoints
      - Add middleware for request/response handling
      - Implement service discovery patterns

validation:
  commands:
    - description: "Validate interface definitions"
      command: "cd services/agent-engine && python -c \"from src.interfaces import *; print('Interfaces loaded successfully')\""
      expected: "Interfaces loaded successfully"
      
    - description: "Test API model validation"
      command: "cd services/agent-engine && python -c \"from src.models.api import *; print('API models loaded successfully')\""
      expected: "API models loaded successfully"
      
    - description: "Run interface tests"
      command: "cd services/agent-engine && python -m pytest tests/test_interfaces.py -v"
      expected: "All interface tests pass"
      
    - description: "Validate service implementations"
      command: "cd services/agent-engine && python -c \"from src.implementations import *; print('Implementations loaded successfully')\""
      expected: "Implementations loaded successfully"

  success_criteria:
    - "All interface definitions created and valid"
    - "API models properly defined with validation"
    - "Service implementations connect interfaces to core"
    - "Integration layer connects to FastAPI endpoints"
    - "All imports and type hints resolve correctly"

dependencies:
  required_before:
    - task: "r6-t01"
      reason: "Need REST API infrastructure for interface layer"
    - task: "r6-t02"
      reason: "Need streaming support for workflow interfaces"
    - task: "r6-t03"  
      reason: "Need GraphQL interface for advanced queries"