task:
  id: "r7-t03-client-sdks"
  name: "Create Client SDKs and Libraries"
  description: "Build Python and JavaScript client SDKs with TypeScript support for easy API integration"
  complexity: "medium"
  estimated_hours: 3
  
  context:
    why: "Client SDKs simplify API integration and provide type-safe, idiomatic interfaces for developers"
    architectural_role: "Developer experience layer providing language-specific API clients"
    depends_on_tasks: ["r6-t01", "r6-t02", "r6-t03"]
    enables_tasks: ["r7-t04"]
    references:
      masterplan: "@MASTERPLAN.md#client-libraries"
      architecture: "@memory-bank/architecture.md#sdk-design"
    
  implementation:
    creates:
      - path: "sdks/"
        purpose: "Client SDKs and libraries"
        content:
          - "python/"
          - "javascript/"
          - "examples/"
      
      - path: "sdks/python/"
        purpose: "Python SDK"
        content:
          - "tahoe_client/"
          - "pyproject.toml"
          - "README.md"
          - "examples/"
          - "tests/"
      
      - path: "sdks/python/tahoe_client/"
        purpose: "Python client library"
        content:
          - "__init__.py"
          - "client.py"
          - "agents.py"
          - "sessions.py"
          - "workflows.py"
          - "websocket.py"
          - "models.py"
          - "exceptions.py"
          - "utils.py"
      
      - path: "sdks/python/tahoe_client/__init__.py"
        purpose: "Python SDK main module"
        content_structure: |
          """Tahoe Agent Orchestration Platform - Python Client SDK"""
          
          from .client import TahoeClient
          from .models import (
              Agent,
              Session,
              Workflow,
              AgentExecution,
              WorkflowExecution,
              AgentSpec,
              SessionConfig
          )
          from .exceptions import (
              TahoeError,
              AuthenticationError,
              NotFoundError,
              ValidationError,
              RateLimitError
          )
          
          __version__ = "1.0.0"
          __author__ = "Tahoe Team"
          __email__ = "support@tahoe.dev"
          
          __all__ = [
              "TahoeClient",
              "Agent",
              "Session", 
              "Workflow",
              "AgentExecution",
              "WorkflowExecution",
              "AgentSpec",
              "SessionConfig",
              "TahoeError",
              "AuthenticationError",
              "NotFoundError",
              "ValidationError",
              "RateLimitError"
          ]
      
      - path: "sdks/python/tahoe_client/client.py"
        purpose: "Main Python client class"
        content_structure: |
          """Main Tahoe client class"""
          
          from typing import Dict, Any, Optional, List, AsyncIterator
          import httpx
          import asyncio
          from urllib.parse import urljoin
          
          from .agents import AgentClient
          from .sessions import SessionClient
          from .workflows import WorkflowClient
          from .websocket import WebSocketClient
          from .exceptions import TahoeError, AuthenticationError
          from .models import Agent, Session, Workflow
          
          class TahoeClient:
              """Main client for Tahoe Agent Orchestration Platform"""
              
              def __init__(
                  self,
                  base_url: str = "http://localhost:8001",
                  api_key: Optional[str] = None,
                  jwt_token: Optional[str] = None,
                  timeout: float = 30.0,
                  max_retries: int = 3
              ):
                  """Initialize Tahoe client
                  
                  Args:
                      base_url: Base URL of Tahoe API
                      api_key: API key for authentication
                      jwt_token: JWT token for authentication
                      timeout: Request timeout in seconds
                      max_retries: Maximum number of retries for failed requests
                  """
                  self.base_url = base_url.rstrip('/')
                  self.timeout = timeout
                  self.max_retries = max_retries
                  
                  # Setup authentication headers
                  headers = {
                      "User-Agent": f"tahoe-python-sdk/1.0.0",
                      "Accept": "application/json",
                      "Content-Type": "application/json"
                  }
                  
                  if api_key:
                      headers["X-API-Key"] = api_key
                  elif jwt_token:
                      headers["Authorization"] = f"Bearer {jwt_token}"
                  else:
                      raise ValueError("Either api_key or jwt_token must be provided")
                  
                  # Create HTTP client
                  self._client = httpx.AsyncClient(
                      base_url=self.base_url,
                      headers=headers,
                      timeout=timeout
                  )
                  
                  # Initialize service clients
                  self.agents = AgentClient(self)
                  self.sessions = SessionClient(self)
                  self.workflows = WorkflowClient(self)
                  self.websocket = WebSocketClient(self)
              
              async def __aenter__(self):
                  return self
              
              async def __aexit__(self, exc_type, exc_val, exc_tb):
                  await self.close()
              
              async def close(self):
                  """Close the client and cleanup resources"""
                  await self._client.aclose()
              
              async def request(
                  self,
                  method: str,
                  path: str,
                  json: Optional[Dict[str, Any]] = None,
                  params: Optional[Dict[str, Any]] = None,
                  **kwargs
              ) -> Dict[str, Any]:
                  """Make HTTP request with error handling and retries"""
                  
                  url = f"/api/v1{path}" if not path.startswith('/api/') else path
                  
                  for attempt in range(self.max_retries + 1):
                      try:
                          response = await self._client.request(
                              method,
                              url,
                              json=json,
                              params=params,
                              **kwargs
                          )
                          
                          if response.status_code == 401:
                              raise AuthenticationError("Authentication failed")
                          elif response.status_code == 404:
                              from .exceptions import NotFoundError
                              raise NotFoundError("Resource not found")
                          elif response.status_code == 429:
                              from .exceptions import RateLimitError
                              raise RateLimitError("Rate limit exceeded")
                          elif response.status_code >= 400:
                              error_data = response.json() if response.headers.get('content-type') == 'application/json' else {}
                              raise TahoeError(
                                  f"HTTP {response.status_code}: {error_data.get('detail', 'Unknown error')}",
                                  status_code=response.status_code
                              )
                          
                          return response.json() if response.content else {}
                          
                      except (httpx.TimeoutException, httpx.ConnectError) as e:
                          if attempt == self.max_retries:
                              raise TahoeError(f"Request failed after {self.max_retries + 1} attempts: {e}")
                          
                          # Exponential backoff
                          await asyncio.sleep(2 ** attempt)
                          continue
              
              async def health(self) -> Dict[str, Any]:
                  """Check API health status"""
                  return await self.request("GET", "/health")
              
              async def get_metrics(self) -> str:
                  """Get Prometheus metrics"""
                  response = await self._client.get("/metrics")
                  return response.text
              
              # Convenience methods
              async def create_agent(
                  self,
                  name: str,
                  agent_type: str,
                  specification: Dict[str, Any],
                  **kwargs
              ) -> Agent:
                  """Create a new agent"""
                  return await self.agents.create(
                      name=name,
                      agent_type=agent_type,
                      specification=specification,
                      **kwargs
                  )
              
              async def execute_agent(
                  self,
                  agent_id: str,
                  input_data: Dict[str, Any],
                  **kwargs
              ) -> Dict[str, Any]:
                  """Execute an agent"""
                  return await self.agents.execute(
                      agent_id=agent_id,
                      input_data=input_data,
                      **kwargs
                  )
              
              async def create_session(
                  self,
                  user_id: str,
                  app_name: str,
                  **kwargs
              ) -> Session:
                  """Create a new session"""
                  return await self.sessions.create(
                      user_id=user_id,
                      app_name=app_name,
                      **kwargs
                  )
      
      - path: "sdks/python/tahoe_client/agents.py"
        purpose: "Agent client implementation"
        content_structure: |
          """Agent management client"""
          
          from typing import Dict, Any, Optional, List, AsyncIterator
          import json
          
          from .models import Agent, AgentExecution, AgentSpec
          from .exceptions import ValidationError
          
          class AgentClient:
              """Client for agent operations"""
              
              def __init__(self, client):
                  self._client = client
              
              async def create(
                  self,
                  name: str,
                  agent_type: str,
                  specification: Dict[str, Any],
                  description: Optional[str] = None,
                  tags: Optional[List[str]] = None
              ) -> Agent:
                  """Create a new agent"""
                  payload = {
                      "name": name,
                      "type": agent_type,
                      "specification": specification
                  }
                  
                  if description:
                      payload["description"] = description
                  if tags:
                      payload["tags"] = tags
                  
                  data = await self._client.request("POST", "/agents", json=payload)
                  return Agent(**data)
              
              async def get(self, agent_id: str) -> Agent:
                  """Get agent by ID"""
                  data = await self._client.request("GET", f"/agents/{agent_id}")
                  return Agent(**data)
              
              async def list(
                  self,
                  agent_type: Optional[str] = None,
                  status: Optional[str] = None,
                  limit: int = 100,
                  offset: int = 0
              ) -> List[Agent]:
                  """List agents with optional filters"""
                  params = {
                      "limit": limit,
                      "offset": offset
                  }
                  
                  if agent_type:
                      params["type"] = agent_type
                  if status:
                      params["status"] = status
                  
                  data = await self._client.request("GET", "/agents", params=params)
                  return [Agent(**agent) for agent in data["agents"]]
              
              async def delete(self, agent_id: str) -> bool:
                  """Delete an agent"""
                  await self._client.request("DELETE", f"/agents/{agent_id}")
                  return True
              
              async def execute(
                  self,
                  agent_id: str,
                  input_data: Dict[str, Any],
                  context: Optional[Dict[str, Any]] = None,
                  session_id: Optional[str] = None,
                  timeout: Optional[int] = None
              ) -> Dict[str, Any]:
                  """Execute an agent synchronously"""
                  payload = {
                      "input_data": input_data
                  }
                  
                  if context:
                      payload["context"] = context
                  if session_id:
                      payload["session_id"] = session_id
                  if timeout:
                      payload["timeout"] = timeout
                  
                  return await self._client.request(
                      "POST",
                      f"/agents/{agent_id}/execute",
                      json=payload
                  )
              
              async def execute_stream(
                  self,
                  agent_id: str,
                  input_data: Dict[str, Any],
                  context: Optional[Dict[str, Any]] = None,
                  session_id: Optional[str] = None
              ) -> AsyncIterator[Dict[str, Any]]:
                  """Execute an agent with streaming response"""
                  payload = {
                      "input_data": input_data
                  }
                  
                  if context:
                      payload["context"] = context
                  if session_id:
                      payload["session_id"] = session_id
                  
                  async with self._client._client.stream(
                      "POST",
                      f"/api/v1/agents/{agent_id}/execute?stream=true",
                      json=payload
                  ) as response:
                      async for line in response.aiter_lines():
                          if line.startswith("data: "):
                              data = line[6:]
                              if data.strip():
                                  yield json.loads(data)
      
      - path: "sdks/javascript/"
        purpose: "JavaScript/TypeScript SDK"
        content:
          - "package.json"
          - "src/"
          - "dist/"
          - "examples/"
          - "tests/"
      
      - path: "sdks/javascript/package.json"
        purpose: "NPM package configuration"
        content_structure: |
          {
            "name": "@tahoe/client",
            "version": "1.0.0",
            "description": "Official JavaScript/TypeScript client for Tahoe Agent Orchestration Platform",
            "main": "dist/index.js",
            "types": "dist/index.d.ts",
            "scripts": {
              "build": "tsc",
              "test": "jest",
              "lint": "eslint src/**/*.ts",
              "prepare": "npm run build"
            },
            "keywords": [
              "tahoe",
              "agent",
              "orchestration",
              "ai",
              "llm",
              "workflow"
            ],
            "author": "Tahoe Team <support@tahoe.dev>",
            "license": "MIT",
            "repository": {
              "type": "git",
              "url": "https://github.com/tahoe/tahoe.git",
              "directory": "sdks/javascript"
            },
            "dependencies": {
              "axios": "^1.6.0",
              "ws": "^8.14.0"
            },
            "devDependencies": {
              "@types/node": "^20.0.0",
              "@types/ws": "^8.5.0",
              "@typescript-eslint/eslint-plugin": "^6.0.0",
              "@typescript-eslint/parser": "^6.0.0",
              "eslint": "^8.50.0",
              "jest": "^29.0.0",
              "typescript": "^5.0.0"
            },
            "files": [
              "dist/**/*",
              "README.md",
              "LICENSE"
            ]
          }
      
      - path: "sdks/javascript/src/"
        purpose: "TypeScript source code"
        content:
          - "index.ts"
          - "client.ts"
          - "agents.ts"
          - "sessions.ts"
          - "workflows.ts"
          - "websocket.ts"
          - "types.ts"
          - "errors.ts"
      
      - path: "sdks/javascript/src/index.ts"
        purpose: "Main TypeScript module"
        content_structure: |
          /**
           * Tahoe Agent Orchestration Platform - JavaScript/TypeScript Client SDK
           */
          
          export { TahoeClient } from './client';
          export { AgentClient } from './agents';
          export { SessionClient } from './sessions';
          export { WorkflowClient } from './workflows';
          export { WebSocketClient } from './websocket';
          
          export * from './types';
          export * from './errors';
          
          // Re-export for convenience
          export { TahoeClient as default } from './client';
      
      - path: "sdks/javascript/src/client.ts"
        purpose: "Main TypeScript client class"
        content_structure: |
          import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';
          import { AgentClient } from './agents';
          import { SessionClient } from './sessions';
          import { WorkflowClient } from './workflows';
          import { WebSocketClient } from './websocket';
          import { TahoeError, AuthenticationError, NotFoundError, RateLimitError } from './errors';
          import { 
              Agent, 
              Session, 
              Workflow, 
              AgentCreateRequest, 
              SessionCreateRequest,
              HealthStatus 
          } from './types';
          
          export interface TahoeClientConfig {
              baseUrl?: string;
              apiKey?: string;
              jwtToken?: string;
              timeout?: number;
              maxRetries?: number;
          }
          
          export class TahoeClient {
              private readonly http: AxiosInstance;
              private readonly maxRetries: number;
              
              public readonly agents: AgentClient;
              public readonly sessions: SessionClient;
              public readonly workflows: WorkflowClient;
              public readonly websocket: WebSocketClient;
              
              constructor(config: TahoeClientConfig = {}) {
                  const {
                      baseUrl = 'http://localhost:8001',
                      apiKey,
                      jwtToken,
                      timeout = 30000,
                      maxRetries = 3
                  } = config;
                  
                  if (!apiKey && !jwtToken) {
                      throw new Error('Either apiKey or jwtToken must be provided');
                  }
                  
                  this.maxRetries = maxRetries;
                  
                  // Setup axios instance
                  const headers: Record<string, string> = {
                      'User-Agent': 'tahoe-js-sdk/1.0.0',
                      'Accept': 'application/json',
                      'Content-Type': 'application/json'
                  };
                  
                  if (apiKey) {
                      headers['X-API-Key'] = apiKey;
                  } else if (jwtToken) {
                      headers['Authorization'] = `Bearer ${jwtToken}`;
                  }
                  
                  this.http = axios.create({
                      baseURL: `${baseUrl.replace(/\/$/, '')}/api/v1`,
                      headers,
                      timeout
                  });
                  
                  // Setup response interceptor for error handling
                  this.http.interceptors.response.use(
                      (response) => response,
                      (error) => {
                          if (error.response) {
                              const { status, data } = error.response;
                              
                              switch (status) {
                                  case 401:
                                      throw new AuthenticationError('Authentication failed');
                                  case 404:
                                      throw new NotFoundError('Resource not found');
                                  case 429:
                                      throw new RateLimitError('Rate limit exceeded');
                                  default:
                                      throw new TahoeError(
                                          `HTTP ${status}: ${data?.detail || 'Unknown error'}`,
                                          status
                                      );
                              }
                          } else {
                              throw new TahoeError(`Request failed: ${error.message}`);
                          }
                      }
                  );
                  
                  // Initialize service clients
                  this.agents = new AgentClient(this.http);
                  this.sessions = new SessionClient(this.http);
                  this.workflows = new WorkflowClient(this.http);
                  this.websocket = new WebSocketClient(baseUrl, headers);
              }
              
              /**
               * Check API health status
               */
              async health(): Promise<HealthStatus> {
                  const { data } = await this.http.get('/health');
                  return data;
              }
              
              /**
               * Get Prometheus metrics
               */
              async getMetrics(): Promise<string> {
                  const { data } = await this.http.get('/metrics', {
                      headers: { Accept: 'text/plain' }
                  });
                  return data;
              }
              
              // Convenience methods
              async createAgent(request: AgentCreateRequest): Promise<Agent> {
                  return this.agents.create(request);
              }
              
              async executeAgent(
                  agentId: string,
                  inputData: Record<string, any>,
                  options?: {
                      context?: Record<string, any>;
                      sessionId?: string;
                      timeout?: number;
                  }
              ): Promise<Record<string, any>> {
                  return this.agents.execute(agentId, inputData, options);
              }
              
              async createSession(request: SessionCreateRequest): Promise<Session> {
                  return this.sessions.create(request);
              }
          }
      
      - path: "sdks/javascript/src/types.ts"
        purpose: "TypeScript type definitions"
        content_structure: |
          export interface Agent {
              id: string;
              name: string;
              type: string;
              status: string;
              created_at: string;
              specification: Record<string, any>;
              metadata?: Record<string, any>;
          }
          
          export interface Session {
              session_id: string;
              user_id: string;
              app_name: string;
              created_at: string;
              updated_at: string;
              is_active: boolean;
              state: Record<string, any>;
              metadata: Record<string, any>;
          }
          
          export interface Workflow {
              id: string;
              name: string;
              created_at: string;
              specification: Record<string, any>;
              metadata?: Record<string, any>;
          }
          
          export interface AgentCreateRequest {
              name: string;
              type: string;
              specification: Record<string, any>;
              description?: string;
              tags?: string[];
          }
          
          export interface SessionCreateRequest {
              user_id: string;
              app_name: string;
              session_id?: string;
              config?: Record<string, any>;
              initial_state?: Record<string, any>;
          }
          
          export interface WorkflowCreateRequest {
              name: string;
              specification: Record<string, any>;
              description?: string;
              tags?: string[];
          }
          
          export interface ExecuteAgentRequest {
              input_data: Record<string, any>;
              context?: Record<string, any>;
              session_id?: string;
              timeout?: number;
          }
          
          export interface HealthStatus {
              status: 'healthy' | 'degraded' | 'unhealthy';
              timestamp: string;
              uptime_seconds: number;
              components: ComponentHealth[];
              summary: Record<string, any>;
          }
          
          export interface ComponentHealth {
              name: string;
              status: 'healthy' | 'degraded' | 'unhealthy';
              message?: string;
              last_check: string;
              response_time_ms?: number;
              details: Record<string, any>;
          }
          
          export interface WebSocketMessage {
              type: string;
              [key: string]: any;
          }
      
      - path: "sdks/examples/"
        purpose: "SDK usage examples"
        content:
          - "python/"
          - "javascript/"
          - "README.md"
      
      - path: "sdks/examples/python/basic_usage.py"
        purpose: "Basic Python SDK usage example"
        content_structure: |
          """Basic usage example for Tahoe Python SDK"""
          
          import asyncio
          from tahoe_client import TahoeClient
          
          async def main():
              # Initialize client
              client = TahoeClient(
                  base_url="http://localhost:8001",
                  api_key="your-api-key-here"
              )
              
              try:
                  # Check API health
                  health = await client.health()
                  print(f"API Status: {health['status']}")
                  
                  # Create a simple LLM agent
                  agent = await client.create_agent(
                      name="Text Summarizer",
                      agent_type="llm",
                      specification={
                          "model": "gemini-1.5-pro",
                          "system_instruction": "You are a text summarization assistant. Provide concise summaries.",
                          "config": {
                              "temperature": 0.3,
                              "max_tokens": 500
                          }
                      },
                      description="Summarizes text content",
                      tags=["nlp", "summarization"]
                  )
                  
                  print(f"Created agent: {agent.id}")
                  
                  # Execute the agent
                  result = await client.execute_agent(
                      agent_id=agent.id,
                      input_data={
                          "text": "Artificial intelligence (AI) is intelligence demonstrated by machines, in contrast to natural intelligence displayed by humans and animals. Leading AI textbooks define the field as the study of 'intelligent agents': any device that perceives its environment and takes actions that maximize its chance of successfully achieving its goals."
                      }
                  )
                  
                  print(f"Summary: {result['result']}")
                  
                  # Create a session
                  session = await client.create_session(
                      user_id="user123",
                      app_name="demo_app"
                  )
                  
                  print(f"Created session: {session.session_id}")
                  
                  # List all agents
                  agents = await client.agents.list()
                  print(f"Total agents: {len(agents)}")
                  
              finally:
                  await client.close()
          
          if __name__ == "__main__":
              asyncio.run(main())
      
      - path: "sdks/examples/javascript/basic_usage.js"
        purpose: "Basic JavaScript SDK usage example"
        content_structure: |
          /**
           * Basic usage example for Tahoe JavaScript SDK
           */
          
          const { TahoeClient } = require('@tahoe/client');
          
          async function main() {
              // Initialize client
              const client = new TahoeClient({
                  baseUrl: 'http://localhost:8001',
                  apiKey: 'your-api-key-here'
              });
              
              try {
                  // Check API health
                  const health = await client.health();
                  console.log(`API Status: ${health.status}`);
                  
                  // Create a simple LLM agent
                  const agent = await client.createAgent({
                      name: 'Text Analyzer',
                      type: 'llm',
                      specification: {
                          model: 'gemini-1.5-pro',
                          system_instruction: 'You are a text analysis assistant. Analyze the sentiment and key topics.',
                          config: {
                              temperature: 0.5,
                              max_tokens: 800
                          }
                      },
                      description: 'Analyzes text sentiment and topics',
                      tags: ['nlp', 'analysis']
                  });
                  
                  console.log(`Created agent: ${agent.id}`);
                  
                  // Execute the agent
                  const result = await client.executeAgent(agent.id, {
                      text: 'I love the new features in this product! The user interface is intuitive and the performance is excellent. However, the documentation could be improved.'
                  });
                  
                  console.log(`Analysis: ${JSON.stringify(result.result, null, 2)}`);
                  
                  // Create a session
                  const session = await client.createSession({
                      user_id: 'user456',
                      app_name: 'demo_app'
                  });
                  
                  console.log(`Created session: ${session.session_id}`);
                  
                  // List agents
                  const agents = await client.agents.list();
                  console.log(`Total agents: ${agents.length}`);
                  
              } catch (error) {
                  console.error('Error:', error.message);
              }
          }
          
          main();
      
      - path: "sdks/python/tests/"
        purpose: "Python SDK tests"
        content:
          - "test_client.py"
          - "test_agents.py"
          - "test_sessions.py"
          - "test_workflows.py"
      
      - path: "sdks/javascript/tests/"
        purpose: "JavaScript SDK tests"
        content:
          - "client.test.ts"
          - "agents.test.ts"
          - "sessions.test.ts"
          - "workflows.test.ts"
    
    uses_from_previous:
      - source: "r6-t01"
        component: "REST API endpoints"
        usage: "HTTP client implementation"
      - source: "r6-t02"
        component: "WebSocket support"
        usage: "Real-time client features"
      - source: "r6-t03"
        component: "GraphQL interface"
        usage: "Advanced querying capabilities"
    
  implementation_steps:
    - step: "Create Python SDK"
      implementation_notes: |
        - Client class structure
        - Async HTTP handling
        - Type hints and models
        
    - step: "Build JavaScript SDK"
      implementation_notes: |
        - TypeScript support
        - Promise-based API
        - WebSocket integration
        
    - step: "Add WebSocket clients"
      implementation_notes: |
        - Real-time messaging
        - Event handling
        - Connection management
        
    - step: "Create examples"
      implementation_notes: |
        - Usage patterns
        - Common scenarios
        - Best practices
        
    - step: "Write documentation"
      implementation_notes: |
        - API reference
        - Getting started guides
        - Integration examples
        
  validation:
    commands:
      - description: "Test Python SDK"
        command: "cd sdks/python && python -m pytest tests/ -v"
        expected: "All tests pass"
        
      - description: "Test JavaScript SDK"
        command: "cd sdks/javascript && npm test"
        expected: "All tests pass"
        
      - description: "Build Python package"
        command: "cd sdks/python && python -m build"
        expected: "Package builds successfully"
        
      - description: "Build JavaScript package"
        command: "cd sdks/javascript && npm run build"
        expected: "TypeScript compiles successfully"
        
      - description: "Run example scripts"
        command: "cd sdks/examples && python python/basic_usage.py"
        expected: "Examples execute without errors"
        
    success_criteria:
      - "Python SDK functional"
      - "JavaScript SDK working"
      - "WebSocket clients operational"
      - "Examples demonstrate usage"
      - "All tests pass"
      
  dependencies:
    required_before:
      - task: "r6-t01"
        reason: "Need REST API for HTTP clients"
      - task: "r6-t02"
        reason: "Need WebSocket support"
      - task: "r6-t03"
        reason: "Need GraphQL interface"