task:
  id: "r2-t1-orchestration-engine"
  name: "Build Core Agent Orchestration Engine"
  session_size: "Complete orchestration workflow with agent selection and execution planning"
  
  context:
    why: "Central coordination of multi-agent compliance analysis workflow"
    integrates_with: ["agent-factory", "result-aggregation", "scorecard-management", "redis-cache"]
    references:
      - "masterplan orchestration engine (lines 305-686)"
      - "roadmap phase 2 orchestration requirements"
    
  build_spec:
    creates:
      - "services/agent-engine/src/services/analysis.py"
      - "services/agent-engine/src/services/content_analyzer.py"
      - "services/agent-engine/tests/test_orchestrator.py"
      - "services/agent-engine/tests/fixtures/fdcpa_violation.json"
    modifies:
      - "src/orchestrator.py (complete implementation)"
      - "src/models/api.py (add AnalysisResult model)"
      - "requirements.txt (add asyncio dependencies)"
    uses:
      - "Asyncio for parallel execution"
      - "Redis for session management"
      - "Prisma for state persistence"
    
  implementation_guide:
    start_with: "Complete TahoeOrchestrator class with full workflow"
    core_logic:
      - "analyze_interaction main workflow method"
      - "Content analysis to determine requirements"
      - "Agent selection based on scorecard rules"
      - "Execution plan building (parallel/sequential)"
      - "Session management in Redis"
      - "Error handling and recovery"
      - "Phase tracking and status updates"
    connects_to:
      - "Agent factory for creating agents (placeholder)"
      - "Result aggregator for combining outputs (placeholder)"
      - "Redis for real-time session tracking"
      - "Database for configuration and results"
    keeps_simple:
      - "Mock agent execution for now (no ADK yet)"
      - "Basic content analysis (keywords only)"
      - "Simple parallel execution (no optimization)"
      - "Fixed timeout values (30 seconds)"
      - "Basic error handling (log and fail)"
    
  local_validation:
    run_commands:
      - "python -m pytest tests/test_orchestrator.py -v"
      - "python scripts/test_orchestration.py"
      - "redis-cli get 'analysis:session:*'"
    verify_endpoints:
      - "POST /analyze creates session in Redis"
      - "Analysis phases tracked in session"
      - "Database record updated with results"
    check_functionality:
      - "Can orchestrate simple workflow end-to-end"
      - "Sessions created and cleaned up in Redis"
      - "Agent selection based on scorecard"
      - "Execution plan groups agents correctly"
      - "Errors handled gracefully"
    
  session_notes:
    context_critical:
      - "Session state enables monitoring"
      - "Phases: content_analysis → agent_selection → execution → aggregation"
      - "Each agent gets 30-second timeout"
      - "Cache scorecard configurations"
    remember_for_later:
      - "Agent factory interface for R2-T2"
      - "Result aggregator interface for R2-T4"
      - "Session format for monitoring"
      - "Error handling patterns"

  implementation_checklist:
    - "Complete analyze_interaction workflow"
    - "Implement analyze_content method"
    - "Build select_agents with trigger rules"
    - "Create build_execution_plan"
    - "Implement execute_agents (with mocks)"
    - "Add Redis session management"
    - "Create ContentAnalyzer service"
    - "Write comprehensive tests"
    - "Add fixture for FDCPA violation"

  workflow_phases:
    1_initialization:
      - "Generate trace_id"
      - "Create analysis record"
      - "Initialize Redis session"
    
    2_content_analysis:
      - "Detect language"
      - "Extract topics (keywords)"
      - "Identify regulatory indicators"
      - "Calculate complexity score"
    
    3_agent_selection:
      - "Load scorecard configuration"
      - "Check agent trigger rules"
      - "Build required agents list"
      - "Sort by execution order"
    
    4_execution_planning:
      - "Separate parallel vs sequential"
      - "Group by execution order"
      - "Calculate total agents"
    
    5_agent_execution:
      - "Execute parallel agents first"
      - "Then sequential phases"
      - "Handle timeouts and errors"
      - "Pass context between agents"
    
    6_result_aggregation:
      - "Placeholder for now"
      - "Just combine agent outputs"
      - "Calculate overall score"
    
    7_cleanup:
      - "Update database record"
      - "Clear Redis session"
      - "Return results"

  mock_implementations:
    mock_agent_execution: |
      # Return dummy result for testing
      return {
        "agent_name": agent_config["template"]["name"],
        "score": 85.0,
        "confidence": 0.9,
        "violations": [],
        "recommendations": [],
        "execution_time": 1.5
      }
    
    mock_content_analysis: |
      # Basic keyword detection
      return {
        "language": "en",
        "interaction_type": "call",
        "detected_topics": ["payment", "collection"],
        "regulatory_indicators": ["fdcpa"],
        "complexity_score": 0.6
      }