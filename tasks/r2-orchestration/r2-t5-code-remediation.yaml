task:
  id: "r2-t5-code-remediation"
  name: "Remediate Implementation Code to Match Corrected YAML Specifications"
  session_size: "Comprehensive code validation and fixes across all R2 components"
  
  context:
    why: "Existing implementation likely uses incorrect ADK patterns - must align with verified documentation"
    integrates_with: ["orchestration-engine", "agent-factory", "model-registry", "result-aggregation"]
    references:
      - "ADK_COMPLIANCE_VERIFICATION.md - verified patterns"
      - "R2-T1 through R2-T4 corrected YAML specifications"
      - "MASTERPLAN.md ADK Integration Notes (lines 306-876)"
    
  build_spec:
    modifies:
      # Core orchestrator fixes
      - "services/agent-engine/src/orchestrator.py (fix ADK imports and patterns)"
      - "services/agent-engine/src/agents/factory.py (implement Runner pattern)"
      - "services/agent-engine/src/agents/base.py (align with TahoeAgent wrapper)"
      - "services/agent-engine/src/models/registry.py (verify configuration only)"
      - "services/agent-engine/src/services/aggregation.py (process correct dict format)"
      - "services/agent-engine/src/tools/registry.py (return FunctionTool instances)"
      # Test fixes
      - "services/agent-engine/tests/test_orchestrator.py (update for new patterns)"
      - "services/agent-engine/tests/test_agent_factory.py (test Runner execution)"
      - "services/agent-engine/tests/test_aggregation.py (test dict processing)"
    creates:
      - "services/agent-engine/REMEDIATION_LOG.md (track all changes made)"
      - "services/agent-engine/tests/test_adk_compliance.py (verify ADK patterns)"
    uses:
      - "Corrected YAML specifications as source of truth"
      - "ADK documentation for pattern verification"
      - "Existing code for incremental fixes"
    
  validation_checklist:
    orchestrator_validations:
      - "❌ CHECK: Imports use LlmAgent not Agent"
      - "❌ CHECK: Imports include Runner and InMemorySessionService"
      - "❌ CHECK: Imports use FunctionTool not @tool decorator"
      - "❌ CHECK: AgentFactory is properly initialized"
      - "❌ CHECK: ContentAnalyzer exists and has all methods"
      - "❌ CHECK: ResultAggregator exists with correct interface"
      - "❌ CHECK: All helper methods present (_should_activate_agent, etc.)"
      - "❌ CHECK: Redis session management implemented"
      - "❌ CHECK: Error handling matches YAML specification"
    
    agent_factory_validations:
      - "❌ CHECK: AgentFactory imports LlmAgent correctly"
      - "❌ CHECK: create_agent returns TahoeAgent wrapper"
      - "❌ CHECK: TahoeAgent.analyze uses Runner pattern"
      - "❌ CHECK: Runner.run_async() with proper parameters"
      - "❌ CHECK: Event processing extracts results correctly"
      - "❌ CHECK: ToolRegistry returns List[FunctionTool]"
      - "❌ CHECK: ModelRegistry exists and returns ModelConfig"
      - "❌ CHECK: Template caching in Redis implemented"
      - "❌ CHECK: Error handling for missing templates"
    
    model_registry_validations:
      - "❌ CHECK: ModelConfig dataclass defined"
      - "❌ CHECK: PROVIDERS static configuration exists"
      - "❌ CHECK: get_config method with overrides"
      - "❌ CHECK: _get_provider detects from model name"
      - "❌ CHECK: No API calls in registry (config only)"
    
    result_aggregator_validations:
      - "❌ CHECK: Processes dict from agent_results not objects"
      - "❌ CHECK: aggregate method signature matches orchestrator"
      - "❌ CHECK: AnalysisResult class with all required fields"
      - "❌ CHECK: Weighted scoring uses scorecard weights"
      - "❌ CHECK: Confidence calculation from dict results"
      - "❌ CHECK: Violation and recommendation processing"
      - "❌ CHECK: Business rules from scorecard thresholds"
    
    tool_registry_validations:
      - "❌ CHECK: load_tools returns List[FunctionTool]"
      - "❌ CHECK: FunctionTool wrapper used correctly"
      - "❌ CHECK: _get_tool_function returns callable"

  code_patterns_to_fix:
    incorrect_imports:
      wrong: |
        from google.adk.agents import Agent
        from google.adk.tools import tool
      correct: |
        from google.adk.agents import LlmAgent
        from google.adk.tools import FunctionTool
        from google.adk.runner import Runner
        from google.adk.sessions import InMemorySessionService
    
    incorrect_agent_creation:
      wrong: |
        agent = Agent(
            name=template["name"],
            tools=tools,
            **kwargs
        )
      correct: |
        adk_agent = LlmAgent(
            name=template["name"],
            model=model_config.model_string,
            description=template.get("description", ""),
            instruction=template.get("systemPrompt", ""),
            tools=tools  # List of FunctionTool instances
        )
    
    incorrect_agent_execution:
      wrong: |
        result = await agent.execute(prompt)
      correct: |
        session_service = InMemorySessionService()
        runner = Runner(
            agent=self.adk_agent,
            session_service=session_service
        )
        
        events = []
        async for event in runner.run_async(
            user_id=trace_id,
            session_id=f"analysis_{trace_id}",
            new_message=user_prompt
        ):
            events.append(event)
        
        return self._process_events_result(events, input_data)
    
    incorrect_tool_wrapping:
      wrong: |
        @tool
        def my_tool():
            pass
      correct: |
        def my_tool_function():
            pass
        
        tool = FunctionTool(func=my_tool_function)
    
    incorrect_result_processing:
      wrong: |
        for agent_result in agent_results:  # Assuming objects
            score = agent_result.score
      correct: |
        for result in agent_results.values():  # Dict format
            if "error" not in result:
                score = result.get("score", 0)

  implementation_guide:
    start_with: "Run all validation checklists to identify gaps"
    phase_1_discovery:
      - "Check each file against its YAML specification"
      - "Document all mismatches in REMEDIATION_LOG.md"
      - "Identify missing classes and methods"
      - "Note incorrect import statements"
    
    phase_2_fixes:
      - "Fix all import statements to use correct ADK classes"
      - "Update AgentFactory to use Runner pattern"
      - "Fix TahoeAgent.analyze to use runner.run_async()"
      - "Update ToolRegistry to return FunctionTool instances"
      - "Fix ResultAggregator to process dict format"
      - "Add all missing helper methods to orchestrator"
    
    phase_3_integration:
      - "Ensure orchestrator uses real factory not stub"
      - "Verify agent execution flow end-to-end"
      - "Test Redis session management"
      - "Validate aggregation with real scorecard data"
    
    phase_4_testing:
      - "Create ADK compliance test suite"
      - "Test each component against YAML specs"
      - "Verify error handling paths"
      - "Run integration tests with mocked ADK"

  local_validation:
    run_commands:
      - "python -m pytest tests/test_adk_compliance.py -v"
      - "grep -r 'from google.adk' src/ | grep -v LlmAgent"  # Find wrong imports
      - "grep -r '@tool' src/"  # Find decorator usage
      - "python scripts/validate_adk_patterns.py"
    verify_functionality:
      - "All ADK imports are correct"
      - "AgentFactory creates TahoeAgent wrappers"
      - "Runner pattern used for execution"
      - "Events processed to extract results"
      - "Tools wrapped with FunctionTool"
      - "Aggregator processes dict format"
    check_patterns:
      - "No use of generic 'Agent' class"
      - "No @tool decorators"
      - "All tools return FunctionTool instances"
      - "Runner.run_async() used for execution"
      - "InMemorySessionService for sessions"

  priority_fixes:
    critical:
      - "Import statements - foundation for everything"
      - "AgentFactory.create_agent - must return TahoeAgent"
      - "TahoeAgent.analyze - must use Runner pattern"
      - "ResultAggregator interface - must match orchestrator"
    
    high:
      - "ToolRegistry - must return FunctionTool list"
      - "Event processing - extract results correctly"
      - "Helper methods in orchestrator"
      - "Redis session management"
    
    medium:
      - "Error handling improvements"
      - "Confidence calculation logic"
      - "Template caching optimization"
      - "Model registry validation"

  expected_outcomes:
    - "All code matches corrected YAML specifications"
    - "ADK patterns implemented correctly throughout"
    - "Tests pass with proper ADK mocking"
    - "End-to-end orchestration flow works"
    - "Documentation updated with correct patterns"

  remediation_log_template: |
    # R2 Code Remediation Log
    
    ## Files Checked
    
    ### orchestrator.py
    - [ ] Correct imports
    - [ ] Helper methods present
    - [ ] AgentFactory usage
    - [ ] Session management
    Issues Found:
    - 
    Fixes Applied:
    - 
    
    ### agents/factory.py
    - [ ] LlmAgent import
    - [ ] Runner pattern
    - [ ] TahoeAgent wrapper
    - [ ] Event processing
    Issues Found:
    - 
    Fixes Applied:
    - 
    
    ### services/aggregation.py
    - [ ] Dict processing
    - [ ] Correct interface
    - [ ] AnalysisResult class
    Issues Found:
    - 
    Fixes Applied:
    - 
    
    ## Pattern Violations
    
    ### Import Issues
    - File: Line: Issue:
    
    ### Execution Issues
    - File: Line: Issue:
    
    ### Tool Issues
    - File: Line: Issue:
    
    ## Test Updates Required
    - 
    
    ## Verification Status
    - [ ] All imports corrected
    - [ ] Runner pattern implemented
    - [ ] FunctionTool wrapping done
    - [ ] Dict processing fixed
    - [ ] Tests updated
    - [ ] Integration verified

  session_notes:
    context_critical:
      - "Use YAML specs as single source of truth"
      - "Every ADK pattern must match documentation"
      - "Maintain backward compatibility where possible"
      - "Document all changes for future reference"
    remember_for_later:
      - "This remediation establishes correct patterns"
      - "Future development must follow these patterns"
      - "Tests validate ADK compliance"
      - "REMEDIATION_LOG.md tracks all changes"