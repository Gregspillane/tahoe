task:
  id: "r2-t2-agent-factory"
  name: "Build Agent Factory and Base Framework"
  session_size: "Complete agent factory with database-driven instantiation and base classes"
  
  context:
    why: "Creates agents dynamically from database templates for flexible configuration"
    integrates_with: ["database-schema", "orchestration-engine", "model-registry"]
    references:
      - "masterplan agent factory (lines 688-814)"
      - "masterplan base agent interface (lines 1919-1968)"
      - "roadmap phase 2 agent infrastructure"
    
  build_spec:
    creates:
      - "services/agent-engine/src/agents/__init__.py"
      - "services/agent-engine/src/agents/factory.py"
      - "services/agent-engine/src/agents/base.py"
      - "services/agent-engine/src/tools/registry.py"
      - "services/agent-engine/tests/test_agent_factory.py"
    modifies:
      - "src/orchestrator.py (use real factory)"
      - "requirements.txt (add google-adk)"
      - "scripts/seed.py (add tool configurations)"
    uses:
      - "Google ADK for agent framework"
      - "Database templates for configuration"
      - "Redis for template caching"
    
  implementation_guide:
    start_with: "Create AgentFactory class with template loading"
    core_logic:
      - "Load agent templates from database"
      - "Cache templates in Redis (5 min TTL)"
      - "Create ADK agents from templates"
      - "Wrap in TahoeAgent for standardization"
      - "BaseSpecialistAgent abstract class"
      - "AgentResult dataclass for outputs"
      - "Tool registry for agent capabilities"
    connects_to:
      - "Database for template storage"
      - "Redis for template caching"
      - "Model registry for LLM configuration"
      - "Orchestrator for agent lifecycle"
    keeps_simple:
      - "Basic ADK integration (no complex tools)"
      - "Simple prompt templates (format strings)"
      - "Mock model calls for testing"
      - "No advanced agent features yet"
      - "Basic tool registry (placeholder)"
    
  local_validation:
    run_commands:
      - "python -m pytest tests/test_agent_factory.py -v"
      - "python scripts/test_agent_creation.py"
      - "redis-cli get 'agent:template:*'"
    verify_endpoints:
      - "Factory creates agents from templates"
      - "Templates cached in Redis"
      - "Agents have standardized interface"
    check_functionality:
      - "Can load template from database"
      - "Cache hit on second load"
      - "Agent wraps ADK properly"
      - "Analyze method returns AgentResult"
      - "Base class enforces interface"
    
  session_notes:
    context_critical:
      - "Templates drive agent behavior"
      - "TahoeAgent wraps ADK agents"
      - "Caching critical for performance"
      - "AgentResult standardizes outputs"
    remember_for_later:
      - "Factory pattern for specialist agents"
      - "Base class for all specialists"
      - "Cache key pattern for templates"
      - "Tool registry interface"

  implementation_checklist:
    - "Create AgentFactory class"
    - "Implement template loading with cache"
    - "Build create_agent method"
    - "Create TahoeAgent wrapper"
    - "Define BaseSpecialistAgent abstract class"
    - "Create AgentResult dataclass"
    - "Build basic ToolRegistry"
    - "Write factory tests"
    - "Test caching behavior"

  class_structure:
    AgentFactory:
      - "load_template(id) - with caching"
      - "create_agent(template) - returns TahoeAgent"
      - "invalidate_cache(id) - clear template"
    
    TahoeAgent:
      - "adk_agent - wrapped ADK agent"
      - "template - configuration from DB"
      - "analyze(input) - execute analysis"
      - "_build_user_prompt() - format prompt"
      - "_process_result() - standardize output"
    
    BaseSpecialistAgent:
      - "analyze() - abstract method"
      - "get_capabilities() - abstract method"
      - "name, version - properties"
    
    AgentResult:
      - "agent_name: str"
      - "agent_version: str"
      - "score: float (0-100)"
      - "confidence: float (0-1)"
      - "findings: List[Dict]"
      - "violations: List[Dict]"
      - "recommendations: List[Dict]"
      - "execution_time: float"
      - "metadata: Dict"

  cache_patterns:
    template_cache: |
      key = f"agent:template:{template_id}"
      ttl = 300  # 5 minutes
      
      # Try cache
      cached = await redis.get(key)
      if cached:
          return json.loads(cached)
      
      # Load from DB
      template = await db.agenttemplate.find_unique(...)
      
      # Cache it
      await redis.setex(key, ttl, json.dumps(template))
      return template

  mock_for_testing:
    mock_adk_agent: |
      # For testing without real LLM calls
      class MockADKAgent:
          async def run(self, input, system):
              return "Mock analysis result"