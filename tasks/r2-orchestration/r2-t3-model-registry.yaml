task:
  id: "r2-t3-model-registry"
  name: "Build Multi-Provider Model Registry"
  session_size: "Complete model registry with Gemini, OpenAI, and Anthropic support"
  
  context:
    why: "Provider-agnostic model management with fallback and configuration handling"
    integrates_with: ["agent-factory", "database-schema"]
    references:
      - "masterplan model registry (lines 816-942)"
      - "roadmap phase 2 model provider support"
    
  build_spec:
    creates:
      - "services/agent-engine/src/models/registry.py"
      - "services/agent-engine/src/models/providers/__init__.py"
      - "services/agent-engine/src/models/providers/gemini.py"
      - "services/agent-engine/src/models/providers/openai.py"
      - "services/agent-engine/src/models/providers/anthropic.py"
      - "services/agent-engine/tests/test_model_registry.py"
    modifies:
      - "src/agents/factory.py (use model registry)"
      - "src/config.py (add API key configs)"
      - "scripts/seed.py (add model provider data)"
    uses:
      - "Provider-specific configurations"
      - "Environment variables for API keys"
      - "Database for provider settings"
    
  implementation_guide:
    start_with: "Create ModelRegistry class with provider configurations"
    core_logic:
      - "ModelConfig dataclass for configurations"
      - "Provider detection from model names"
      - "Default parameters per model"
      - "Parameter override capability"
      - "Availability checking (basic)"
      - "Provider-specific adapters"
      - "Fallback handling logic"
    connects_to:
      - "Agent factory for model selection"
      - "Database for provider configs"
      - "Environment for API keys"
    keeps_simple:
      - "Static provider configurations with real API integration"
      - "Real API availability checking with actual endpoints"
      - "Production-ready model configurations"
      - "No rate limiting or quotas (for now)"
      - "No cost tracking (for now)"
    
  local_validation:
    run_commands:
      - "python -m pytest tests/test_model_registry.py -v"
      - "python scripts/test_model_configs.py"
    verify_endpoints:
      - "Registry returns correct model strings"
      - "Parameters merge correctly"
      - "Provider detection works"
    check_functionality:
      - "Can get config for each provider"
      - "Override parameters work"
      - "Unknown models raise errors"
      - "Availability check returns boolean"
      - "Provider adapters initialized"
    
  session_notes:
    context_critical:
      - "Model names determine provider"
      - "Each provider has specific parameters"
      - "API keys from environment variables"
      - "Configurations stored in database"
    remember_for_later:
      - "Model string formats per provider"
      - "Parameter names differ by provider"
      - "Fallback patterns for failures"
      - "Cost implications of models"

  implementation_checklist:
    - "Create ModelRegistry class"
    - "Define ModelConfig dataclass"
    - "Add real provider configurations with API keys"
    - "Implement get_config method"
    - "Add provider detection logic"
    - "Create functional provider adapters"
    - "Build real API availability checking"
    - "Write comprehensive tests with real API calls"
    - "Update seed data with production models"
    - "Validate Gemini API integration"

  provider_configurations:
    gemini:
      models:
        - name: "gemini-2.0-flash"
          string: "gemini-2.0-flash"
          defaults:
            temperature: 0.3
            max_tokens: 2000
            top_p: 0.95
        - name: "gemini-1.5-pro"
          string: "gemini-1.5-pro"
          defaults:
            temperature: 0.5
            max_tokens: 4000
            top_p: 0.95
    
    openai:
      models:
        - name: "gpt-4-turbo"
          string: "gpt-4-turbo-preview"
          defaults:
            temperature: 0.3
            max_tokens: 2000
            top_p: 1.0
        - name: "gpt-4o"
          string: "gpt-4o"
          defaults:
            temperature: 0.3
            max_tokens: 2000
            top_p: 1.0
    
    anthropic:
      models:
        - name: "claude-3-opus"
          string: "claude-3-opus-20240229"
          defaults:
            temperature: 0.3
            max_output_tokens: 2000
            top_p: 1.0
        - name: "claude-3-sonnet"
          string: "claude-3-sonnet-20240229"
          defaults:
            temperature: 0.3
            max_output_tokens: 2000
            top_p: 1.0

  provider_detection:
    logic: |
      if model_name.startswith("gemini"):
          return "gemini"
      elif model_name.startswith("gpt"):
          return "openai"
      elif model_name.startswith("claude"):
          return "anthropic"
      else:
          raise ValueError(f"Unknown provider for: {model_name}")

  real_availability_checking:
    implementation: |
      async def check_model_availability(self, model_name: str) -> bool:
          # Real API availability check
          provider = self._get_provider(model_name)
          
          if provider == "gemini":
              return await self._check_gemini_availability(model_name)
          elif provider == "openai":
              return await self._check_openai_availability(model_name)
          elif provider == "anthropic":
              return await self._check_anthropic_availability(model_name)
          else:
              return False
      
      async def _check_gemini_availability(self, model_name: str) -> bool:
          # Use Google AI API to check model availability
          import google.generativeai as genai
          try:
              api_key = os.getenv("GOOGLE_API_KEY")
              if not api_key:
                  return False
              genai.configure(api_key=api_key)
              models = genai.list_models()
              return any(model_name in model.name for model in models)
          except Exception:
              return False
    
    environment_requirements: |
      # Required API keys for real availability checking
      GOOGLE_API_KEY=your_google_api_key
      OPENAI_API_KEY=your_openai_api_key  
      ANTHROPIC_API_KEY=your_anthropic_api_key