task:
  id: "r2-t03-workflow-agents"
  name: "Implement Workflow Agent Builders"
  description: "Create builders for SequentialAgent, ParallelAgent, and LoopAgent to enable workflow orchestration from specifications"
  complexity: "medium"
  estimated_hours: 4
  
  context:
    why: "Workflow agents enable complex orchestration patterns and are essential for building sophisticated agent systems"
    architectural_role: "Builders that create workflow agents for sequential, parallel, and loop execution patterns"
    depends_on_tasks: ["r2-t01"]
    enables_tasks: ["r2-t05", "r2-t06"]
    references:
      masterplan: "@MASTERPLAN.md#workflow-agents"
      adk_docs: 
        - "https://google.github.io/adk-docs/agents/workflow-agents/sequential-agents"
        - "https://google.github.io/adk-docs/agents/workflow-agents/parallel-agents"
        - "https://google.github.io/adk-docs/agents/workflow-agents/loop-agents"
      project_context: "@tasks/project-context.md#workflow-orchestration"
      adk_patterns: "@tasks/adk-patterns.md#workflow-agents"
    
  adk_components:
    imports_needed:
      - "from google.adk.agents import SequentialAgent, ParallelAgent, LoopAgent"
      - "from typing import List, Dict, Any, Optional"
      - "from dataclasses import dataclass"
      - "import logging"
    verified_patterns:
      # VERIFIED: ADK docs confirm these patterns
      - pattern: "SequentialAgent executes sub-agents in order"
        doc_ref: "https://google.github.io/adk-docs/agents/workflow-agents/sequential-agents"
      - pattern: "ParallelAgent executes sub-agents concurrently"
        doc_ref: "https://google.github.io/adk-docs/agents/workflow-agents/parallel-agents"
      - pattern: "LoopAgent iterates sub-agents with max_iterations"
        doc_ref: "https://google.github.io/adk-docs/agents/workflow-agents/loop-agents"
    avoid_antipatterns:
      - "Don't create empty workflow agents without sub-agents"
      - "Don't mix execution patterns in single agent"
      # CORRECTED: Removed termination_condition - not a LoopAgent parameter
      - "Don't create LoopAgent without max_iterations (risks infinite loops)"
      - "Don't create circular dependencies between agents"
    
  implementation:
    creates:
      - path: "services/agent-engine/src/core/builders/workflow_builders.py"
        purpose: "Workflow agent builders implementation"
        exports:
          - "SequentialAgentBuilder: Builder for sequential workflows"
          - "ParallelAgentBuilder: Builder for parallel workflows"
          - "LoopAgentBuilder: Builder for loop workflows"
        content_structure: |
          from google.adk.agents import SequentialAgent, ParallelAgent, LoopAgent, BaseAgent
          from typing import List, Dict, Any, Optional
          from dataclasses import dataclass
          import logging
          
          from ..composition import AgentBuilder, AgentSpec, AgentContext
          # ADDED: Import UniversalAgentFactory for recursive composition
          from ..factory import UniversalAgentFactory
          from ..specification import SpecificationError
          
          logger = logging.getLogger(__name__)
          
          class WorkflowBuilderBase(AgentBuilder):
              """Base class for workflow builders"""
              
              def __init__(self, factory: Optional[UniversalAgentFactory] = None):
                  # CORRECTED: Accept factory in constructor instead of setting later
                  self.factory = factory
                  
              def build_sub_agents(self, sub_agent_specs: List[Dict], context: AgentContext) -> List[BaseAgent]:
                  """Build sub-agents from specifications using factory"""
                  # CORRECTED: Use factory's build_agent method for all sub-agents
                  if not self.factory:
                      raise SpecificationError("Factory not provided for sub-agent building")
                  
                  sub_agents = []
                  for spec in sub_agent_specs:
                      try:
                          # SIMPLIFIED: Only check spec_ref - factory handles the rest
                          if "spec_ref" not in spec:
                              logger.warning(f"Invalid sub-agent specification: {spec}")
                              continue
                          
                          # CORRECTED: Use factory's unified build_agent method
                          sub_agent = self.factory.build_agent(
                              spec["spec_ref"],
                              self._enhance_context(context, spec)
                          )
                          sub_agents.append(sub_agent)
                          
                      except Exception as e:
                          logger.error(f"Error building sub-agent: {e}")
                          raise SpecificationError(f"Failed to build sub-agent: {e}")
                  
                  return sub_agents
              
              def _enhance_context(self, parent_context: AgentContext, spec: Dict) -> AgentContext:
                  """Enhance context with sub-agent specific variables"""
                  # SIMPLIFIED: Just add sub-agent variables to context
                  sub_variables = parent_context.variables.copy()
                  sub_variables.update(spec.get("variables", {}))
                  
                  return AgentContext(
                      user_id=parent_context.user_id,
                      session_id=parent_context.session_id,
                      environment=parent_context.environment,
                      variables=sub_variables,
                      parent_agent=spec.get("name", "workflow")
                  )
              
              def validate_workflow_spec(self, spec: AgentSpec) -> bool:
                  """Validate workflow specification"""
                  try:
                      # Check for sub-agents
                      if "sub_agents" not in spec.spec or not spec.spec["sub_agents"]:
                          logger.error("Workflow must have sub-agents")
                          return False
                      
                      # Validate each sub-agent spec has spec_ref
                      for sub_spec in spec.spec["sub_agents"]:
                          if "spec_ref" not in sub_spec:
                              logger.error("Sub-agent must have spec_ref")
                              return False
                      
                      return True
                      
                  except Exception as e:
                      logger.error(f"Validation error: {e}")
                      return False
          
          class SequentialAgentBuilder(WorkflowBuilderBase):
              """Builder for sequential workflow agents"""
              
              def can_build(self, agent_type: str) -> bool:
                  """Check if this builder can handle the agent type"""
                  return agent_type == "sequential"
              
              def validate_spec(self, spec: AgentSpec) -> bool:
                  """Validate sequential agent specification"""
                  if not self.validate_workflow_spec(spec):
                      return False
                  
                  agent_spec = spec.spec.get("agent", {})
                  if agent_spec.get("type") != "sequential":
                      return False
                  
                  return True
              
              def build(self, spec: AgentSpec, context: AgentContext) -> SequentialAgent:
                  """Build sequential agent from specification"""
                  if not self.validate_spec(spec):
                      raise SpecificationError(f"Invalid sequential agent specification: {spec.metadata.get('name')}")
                  
                  metadata = spec.metadata
                  
                  # Build sub-agents using factory
                  sub_agents = self.build_sub_agents(spec.spec["sub_agents"], context)
                  
                  if not sub_agents:
                      raise SpecificationError("Sequential agent must have at least one sub-agent")
                  
                  # Create SequentialAgent - VERIFIED: correct ADK pattern
                  try:
                      agent = SequentialAgent(
                          name=metadata.get("name", "sequential_workflow"),
                          sub_agents=sub_agents,
                          description=metadata.get("description", "")
                      )
                      
                      logger.info(f"Successfully built sequential agent: {metadata.get('name')}")
                      return agent
                      
                  except Exception as e:
                      raise SpecificationError(f"Error creating sequential agent: {e}")
          
          class ParallelAgentBuilder(WorkflowBuilderBase):
              """Builder for parallel workflow agents"""
              
              def can_build(self, agent_type: str) -> bool:
                  """Check if this builder can handle the agent type"""
                  return agent_type == "parallel"
              
              def validate_spec(self, spec: AgentSpec) -> bool:
                  """Validate parallel agent specification"""
                  if not self.validate_workflow_spec(spec):
                      return False
                  
                  agent_spec = spec.spec.get("agent", {})
                  if agent_spec.get("type") != "parallel":
                      return False
                  
                  return True
              
              def build(self, spec: AgentSpec, context: AgentContext) -> ParallelAgent:
                  """Build parallel agent from specification"""
                  if not self.validate_spec(spec):
                      raise SpecificationError(f"Invalid parallel agent specification: {spec.metadata.get('name')}")
                  
                  metadata = spec.metadata
                  agent_spec = spec.spec.get("agent", {})
                  
                  # Build sub-agents using factory
                  sub_agents = self.build_sub_agents(spec.spec["sub_agents"], context)
                  
                  if not sub_agents:
                      raise SpecificationError("Parallel agent must have at least one sub-agent")
                  
                  # ADDED: Extract any ADK-supported parameters
                  parameters = agent_spec.get("parameters", {})
                  
                  # Create ParallelAgent - VERIFIED: correct ADK pattern
                  try:
                      agent = ParallelAgent(
                          name=metadata.get("name", "parallel_workflow"),
                          sub_agents=sub_agents,
                          description=metadata.get("description", ""),
                          **parameters  # Pass through any ADK-supported parameters
                      )
                      
                      logger.info(f"Successfully built parallel agent: {metadata.get('name')}")
                      return agent
                      
                  except Exception as e:
                      raise SpecificationError(f"Error creating parallel agent: {e}")
          
          class LoopAgentBuilder(WorkflowBuilderBase):
              """Builder for loop workflow agents"""
              
              def can_build(self, agent_type: str) -> bool:
                  """Check if this builder can handle the agent type"""
                  return agent_type == "loop"
              
              def validate_spec(self, spec: AgentSpec) -> bool:
                  """Validate loop agent specification"""
                  if not self.validate_workflow_spec(spec):
                      return False
                  
                  agent_spec = spec.spec.get("agent", {})
                  if agent_spec.get("type") != "loop":
                      return False
                  
                  # CORRECTED: Check for max_iterations (not termination_condition)
                  loop_config = agent_spec.get("loop_config", {})
                  if not loop_config.get("max_iterations"):
                      logger.warning("Loop agent should have max_iterations to prevent infinite loops")
                  
                  return True
              
              def build(self, spec: AgentSpec, context: AgentContext) -> LoopAgent:
                  """Build loop agent from specification"""
                  if not self.validate_spec(spec):
                      raise SpecificationError(f"Invalid loop agent specification: {spec.metadata.get('name')}")
                  
                  metadata = spec.metadata
                  agent_spec = spec.spec.get("agent", {})
                  loop_config = agent_spec.get("loop_config", {})
                  
                  # Build sub-agents using factory
                  sub_agents = self.build_sub_agents(spec.spec["sub_agents"], context)
                  
                  if not sub_agents:
                      raise SpecificationError("Loop agent must have at least one sub-agent")
                  
                  # CORRECTED: Only use max_iterations parameter (verified from ADK docs)
                  max_iterations = loop_config.get("max_iterations", 10)
                  
                  # Create LoopAgent - VERIFIED: correct ADK pattern
                  try:
                      agent = LoopAgent(
                          name=metadata.get("name", "loop_workflow"),
                          sub_agents=sub_agents,
                          description=metadata.get("description", ""),
                          max_iterations=max_iterations
                          # REMOVED: termination_condition - not an ADK LoopAgent parameter
                      )
                      
                      logger.info(f"Successfully built loop agent: {metadata.get('name')}")
                      return agent
                      
                  except Exception as e:
                      raise SpecificationError(f"Error creating loop agent: {e}")
        
      - path: "services/agent-engine/tests/test_workflow_builders.py"
        purpose: "Unit tests for workflow agent builders"
        test_categories:
          - "Sequential agent building"
          - "Parallel agent building"
          - "Loop agent building"
          - "Factory integration"
          - "Context enhancement"
          - "Error handling"
        content_structure: |
          import pytest
          from unittest.mock import Mock, patch, MagicMock
          
          from src.core.builders.workflow_builders import (
              SequentialAgentBuilder, ParallelAgentBuilder, LoopAgentBuilder,
              WorkflowBuilderBase
          )
          from src.core.composition import AgentSpec, AgentContext
          from src.core.factory import UniversalAgentFactory
          from src.core.specification import SpecificationError
          
          class TestWorkflowBuilderBase:
              def test_init_with_factory(self):
                  """Test initialization with factory"""
                  # CORRECTED: Test factory passed in constructor
                  mock_factory = Mock(spec=UniversalAgentFactory)
                  builder = WorkflowBuilderBase(factory=mock_factory)
                  
                  assert builder.factory == mock_factory
              
              def test_build_sub_agents_with_factory(self):
                  """Test building sub-agents using factory"""
                  # CORRECTED: Test factory integration
                  mock_factory = Mock(spec=UniversalAgentFactory)
                  mock_agent = Mock()
                  mock_factory.build_agent.return_value = mock_agent
                  
                  builder = WorkflowBuilderBase(factory=mock_factory)
                  context = AgentContext()
                  
                  sub_agent_specs = [
                      {"spec_ref": "agent1", "variables": {"var1": "value1"}},
                      {"spec_ref": "agent2", "variables": {"var2": "value2"}}
                  ]
                  
                  sub_agents = builder.build_sub_agents(sub_agent_specs, context)
                  
                  assert len(sub_agents) == 2
                  assert mock_factory.build_agent.call_count == 2
              
              def test_enhance_context(self):
                  """Test context enhancement with sub-agent variables"""
                  builder = WorkflowBuilderBase()
                  parent_context = AgentContext(
                      variables={"parent_var": "value"},
                      user_id="user123"
                  )
                  spec = {
                      "name": "sub_agent",
                      "variables": {"sub_var": "sub_value"}
                  }
                  
                  enhanced_context = builder._enhance_context(parent_context, spec)
                  
                  assert enhanced_context.user_id == "user123"
                  assert enhanced_context.variables["parent_var"] == "value"
                  assert enhanced_context.variables["sub_var"] == "sub_value"
                  assert enhanced_context.parent_agent == "sub_agent"
              
              def test_validate_workflow_spec_no_sub_agents(self):
                  """Test validation fails without sub-agents"""
                  builder = WorkflowBuilderBase()
                  spec = AgentSpec(
                      api_version="agent-engine/v1",
                      kind="AgentSpec",
                      metadata={"name": "test", "version": "1.0.0"},
                      spec={"agent": {"type": "sequential"}}
                  )
                  
                  assert builder.validate_workflow_spec(spec) == False
          
          class TestSequentialAgentBuilder:
              def test_can_build_sequential(self):
                  """Test builder recognizes sequential type"""
                  builder = SequentialAgentBuilder()
                  assert builder.can_build("sequential") == True
                  assert builder.can_build("parallel") == False
                  assert builder.can_build("llm") == False
              
              def test_validate_spec_valid(self):
                  """Test validation of valid sequential spec"""
                  builder = SequentialAgentBuilder()
                  spec = AgentSpec(
                      api_version="agent-engine/v1",
                      kind="AgentSpec",
                      metadata={"name": "test", "version": "1.0.0"},
                      spec={
                          "agent": {"type": "sequential"},
                          "sub_agents": [
                              {"spec_ref": "agent1"},
                              {"spec_ref": "agent2"}
                          ]
                      }
                  )
                  
                  assert builder.validate_spec(spec) == True
              
              @patch('src.core.builders.workflow_builders.SequentialAgent')
              def test_build_sequential_agent(self, mock_sequential):
                  """Test building sequential agent with factory"""
                  # CORRECTED: Test with factory integration
                  mock_factory = Mock(spec=UniversalAgentFactory)
                  mock_sub_agent1 = Mock()
                  mock_sub_agent2 = Mock()
                  mock_factory.build_agent.side_effect = [mock_sub_agent1, mock_sub_agent2]
                  
                  builder = SequentialAgentBuilder(factory=mock_factory)
                  
                  spec = AgentSpec(
                      api_version="agent-engine/v1",
                      kind="AgentSpec",
                      metadata={"name": "test_sequential", "version": "1.0.0"},
                      spec={
                          "agent": {"type": "sequential"},
                          "sub_agents": [
                              {"spec_ref": "agent1"},
                              {"spec_ref": "agent2"}
                          ]
                      }
                  )
                  context = AgentContext()
                  
                  mock_agent_instance = Mock()
                  mock_sequential.return_value = mock_agent_instance
                  
                  agent = builder.build(spec, context)
                  
                  mock_sequential.assert_called_once()
                  call_args = mock_sequential.call_args
                  assert call_args.kwargs['name'] == "test_sequential"
                  assert len(call_args.kwargs['sub_agents']) == 2
          
          class TestParallelAgentBuilder:
              def test_can_build_parallel(self):
                  """Test builder recognizes parallel type"""
                  builder = ParallelAgentBuilder()
                  assert builder.can_build("parallel") == True
                  assert builder.can_build("sequential") == False
              
              def test_validate_spec_valid(self):
                  """Test validation of valid parallel spec"""
                  builder = ParallelAgentBuilder()
                  spec = AgentSpec(
                      api_version="agent-engine/v1",
                      kind="AgentSpec",
                      metadata={"name": "test", "version": "1.0.0"},
                      spec={
                          "agent": {"type": "parallel"},
                          "sub_agents": [
                              {"spec_ref": "agent1"},
                              {"spec_ref": "agent2"}
                          ]
                      }
                  )
                  
                  assert builder.validate_spec(spec) == True
              
              @patch('src.core.builders.workflow_builders.ParallelAgent')
              def test_build_parallel_agent(self, mock_parallel):
                  """Test building parallel agent with factory"""
                  # CORRECTED: Test with factory integration
                  mock_factory = Mock(spec=UniversalAgentFactory)
                  mock_sub_agent1 = Mock()
                  mock_sub_agent2 = Mock()
                  mock_factory.build_agent.side_effect = [mock_sub_agent1, mock_sub_agent2]
                  
                  builder = ParallelAgentBuilder(factory=mock_factory)
                  
                  spec = AgentSpec(
                      api_version="agent-engine/v1",
                      kind="AgentSpec",
                      metadata={"name": "test_parallel", "version": "1.0.0"},
                      spec={
                          "agent": {
                              "type": "parallel",
                              "parameters": {}  # ADDED: Support for ADK parameters
                          },
                          "sub_agents": [
                              {"spec_ref": "agent1"},
                              {"spec_ref": "agent2"}
                          ]
                      }
                  )
                  context = AgentContext()
                  
                  mock_agent_instance = Mock()
                  mock_parallel.return_value = mock_agent_instance
                  
                  agent = builder.build(spec, context)
                  
                  mock_parallel.assert_called_once()
          
          class TestLoopAgentBuilder:
              def test_can_build_loop(self):
                  """Test builder recognizes loop type"""
                  builder = LoopAgentBuilder()
                  assert builder.can_build("loop") == True
                  assert builder.can_build("sequential") == False
              
              def test_validate_spec_valid(self):
                  """Test validation of valid loop spec"""
                  builder = LoopAgentBuilder()
                  spec = AgentSpec(
                      api_version="agent-engine/v1",
                      kind="AgentSpec",
                      metadata={"name": "test", "version": "1.0.0"},
                      spec={
                          "agent": {
                              "type": "loop",
                              "loop_config": {"max_iterations": 5}
                          },
                          "sub_agents": [{"spec_ref": "agent1"}]
                      }
                  )
                  
                  assert builder.validate_spec(spec) == True
              
              @patch('src.core.builders.workflow_builders.LoopAgent')
              def test_build_loop_agent(self, mock_loop):
                  """Test building loop agent with correct parameters"""
                  # CORRECTED: Test with factory and correct LoopAgent parameters
                  mock_factory = Mock(spec=UniversalAgentFactory)
                  mock_sub_agent = Mock()
                  mock_factory.build_agent.return_value = mock_sub_agent
                  
                  builder = LoopAgentBuilder(factory=mock_factory)
                  
                  spec = AgentSpec(
                      api_version="agent-engine/v1",
                      kind="AgentSpec",
                      metadata={"name": "test_loop", "version": "1.0.0"},
                      spec={
                          "agent": {
                              "type": "loop",
                              "loop_config": {
                                  "max_iterations": 10
                                  # REMOVED: termination_condition test
                              }
                          },
                          "sub_agents": [{"spec_ref": "agent1"}]
                      }
                  )
                  context = AgentContext()
                  
                  mock_agent_instance = Mock()
                  mock_loop.return_value = mock_agent_instance
                  
                  agent = builder.build(spec, context)
                  
                  mock_loop.assert_called_once()
                  call_args = mock_loop.call_args
                  assert call_args.kwargs['name'] == "test_loop"
                  assert call_args.kwargs['max_iterations'] == 10
                  # VERIFIED: No termination_condition parameter
        
    modifies:
      - path: "services/agent-engine/src/core/builders/__init__.py"
        changes: "Add workflow builder imports"
      # ADDED: Factory integration
      - path: "services/agent-engine/src/core/factory.py"
        changes: "Update UniversalAgentFactory to register workflow builders"
        
    uses_from_previous:
      - source: "r2-t01"
        component: "AgentBuilder base class"
        usage: "Workflow builders extend AgentBuilder"
      - source: "r2-t01"
        component: "UniversalAgentFactory"
        # CORRECTED: Proper integration description
        usage: "Factory passed to builders for recursive sub-agent composition"
    
  implementation_steps:
    - step: "Create WorkflowBuilderBase class"
      implementation_notes: |
        - Abstract base for all workflow builders
        # CORRECTED: Integrate with UniversalAgentFactory
        - Accept factory in constructor for sub-agent building
        - Context enhancement for sub-agents
        - Specification validation
      validates:
        - "Base class provides shared functionality"
        - "Factory integration works"
        
    - step: "Implement SequentialAgentBuilder"
      implementation_notes: |
        - Build agents that execute in order
        - Validate sequential specifications
        - Create SequentialAgent instances
        # VERIFIED: Correct ADK pattern
        - Pass name, sub_agents, description to constructor
      validates:
        - "Sequential agents created correctly"
        - "Sub-agents execute in order"
        
    - step: "Create ParallelAgentBuilder"
      implementation_notes: |
        - Build agents that execute concurrently
        # ADDED: Support for ADK parameters
        - Pass through ADK-supported parameters
        - Handle parallel execution
        # VERIFIED: Correct ADK pattern
      validates:
        - "Parallel agents created correctly"
        - "Sub-agents execute concurrently"
        
    - step: "Implement LoopAgentBuilder"
      implementation_notes: |
        - Build agents that iterate
        # CORRECTED: Only use max_iterations
        - Support max_iterations parameter
        - Prevent infinite loops
        # REMOVED: termination_condition logic
      validates:
        - "Loop agents created correctly"
        - "Max iterations enforced"
        
    - step: "Update factory integration"
      implementation_notes: |
        # ADDED: Proper factory integration
        - Register workflow builders with factory
        - Pass factory to builders for sub-agent creation
        - Enable recursive agent composition
      validates:
        - "All builders registered with factory"
        - "Recursive composition works"
        
    - step: "Write comprehensive tests"
      implementation_notes: |
        - Test each builder type
        # CORRECTED: Test factory integration
        - Test factory-based sub-agent composition
        - Test context enhancement
        - Test error handling
      validates:
        - "pytest tests/test_workflow_builders.py passes"
        - "Coverage > 80%"
        
  validation:
    commands:
      - description: "Run unit tests"
        command: "cd services/agent-engine && pytest tests/test_workflow_builders.py -v"
        expected: "All tests pass"
        
      - description: "Check code coverage"
        command: "cd services/agent-engine && pytest tests/test_workflow_builders.py --cov=src/core/builders --cov-report=term-missing"
        expected: "Coverage > 80%"
        
      - description: "Verify imports"
        command: |
          cd services/agent-engine && python -c "
          from src.core.builders.workflow_builders import (
              SequentialAgentBuilder, ParallelAgentBuilder, LoopAgentBuilder
          )
          print('All imports successful')
          "
        expected: "All imports successful"
        
    success_criteria:
      - "All workflow builder classes implemented"
      # CORRECTED: Focus on factory integration
      - "Factory integration for sub-agent composition"
      - "Context enhancement functions correctly"
      - "All unit tests pass"
      - "Code coverage > 80%"
      
  dependencies:
    required_before:
      - task: "r2-t01"
        # CORRECTED: Accurate dependency description
        reason: "Need UniversalAgentFactory and AgentBuilder base class"
        
    enables_after:
      - task: "r2-t05"
        reason: "Runner integration needs all agent builders"
      - task: "r2-t06"
        reason: "Composition tests need workflow builders"
        
  notes:
    key_decisions:
      # CORRECTED: Accurate design decisions
      - "Factory-based sub-agent composition"
      - "Simple context enhancement without eval()"
      - "Max iterations for LoopAgent (no termination_condition)"
      - "Pass-through ADK parameters for extensibility"
      
    future_enhancements:
      - "Add workflow state management"
      - "Support dynamic workflow modification"
      - "Add workflow debugging tools"
      - "Enable workflow visualization"
      # ADDED: Termination strategy enhancement
      - "Implement termination strategies via sub-agents"
      
    technical_debt:
      - "Consider adding workflow validation"
      - "May need async execution optimization"
      - "Could benefit from execution tracing"
      # ADDED: Note about termination logic
      - "LoopAgent termination logic must be in sub-agents"