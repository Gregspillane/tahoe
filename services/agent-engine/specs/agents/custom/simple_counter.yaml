apiVersion: "agent-engine/v1"
kind: "AgentSpec"
metadata:
  name: "simple-counter"
  version: "1.0.0"
  description: "Dynamic custom agent that counts and processes items"
  tags: ["custom", "dynamic", "counter"]
  author: "tahoe-platform"
  created_at: "2025-08-14T00:00:00Z"

spec:
  agent:
    type: "custom"
    custom_class: "SimpleCounter"
    parameters:
      max_count: 10
      step_size: 1
      description: "Counts up to a maximum value with configurable step size"

# This demonstrates dynamic custom agent creation via specification
implementation:
  class_name: "SimpleCounter"
  class_definition: |
    class SimpleCounter(BaseAgent):
        """Simple counter custom agent for demonstration."""
        
        def __init__(self, name, max_count=10, step_size=1, description="", **kwargs):
            # Initialize with only ADK BaseAgent fields
            super().__init__(
                name=name, 
                description=description,
                **{k: v for k, v in kwargs.items() if k in ['parent_agent', 'before_agent_callback', 'after_agent_callback']}
            )
            
            # Store custom fields as instance attributes (not Pydantic fields)
            object.__setattr__(self, 'max_count', max_count)
            object.__setattr__(self, 'step_size', step_size)
            logging.getLogger(__name__).info(f"Created SimpleCounter: {name}, max={max_count}, step={step_size}")
        
        async def _run_async_impl(self, ctx):
            """Count from 0 to max_count with step_size increments."""
            current = 0
            count_steps = 0
            
            while current < self.max_count:
                yield Event(type="count", data={"current": current, "max": self.max_count})
                current += self.step_size
                count_steps += 1
                
                # Simulate some processing time in real implementation
                if count_steps > 100:  # Prevent infinite loops
                    break
            
            yield Event(type="complete", data={
                "final_count": current,
                "steps_taken": count_steps,
                "reached_max": current >= self.max_count
            })

validation:
  input_schema:
    type: "object"
    properties:
      start_value:
        type: "integer"
        description: "Starting value for counting"
        default: 0
      trigger:
        type: "string"
        description: "Trigger signal to start counting"
        default: "start"
  
  output_schema:
    type: "object"
    properties:
      final_count:
        type: "integer"
        description: "Final count value reached"
      steps_taken:
        type: "integer"
        description: "Number of counting steps taken"
      reached_max:
        type: "boolean"
        description: "Whether maximum count was reached"

examples:
  - name: "Basic Counting"
    input:
      trigger: "start"
    expected_output:
      final_count: 10
      steps_taken: 10
      reached_max: true