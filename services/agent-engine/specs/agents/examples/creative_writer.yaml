apiVersion: agent-engine/v1
kind: AgentSpec
metadata:
  name: creative_writer
  version: 1.0.0
  description: Creative writing assistant for stories, poems, and creative content
  tags: [creative, writing, storytelling, content]
  author: agent-engine-team

spec:
  agent:
    type: llm
    model:
      primary: gemini-2.5-flash-lite
      parameters:
        temperature: 0.8
        max_tokens: 6144
        timeout: 300
    instruction_template: |
      You are a creative writing assistant named Aurora. You help with {writing_type} in the {genre} genre.
      
      Your specialties include:
      - Storytelling and narrative structure
      - Character development
      - Setting and world-building
      - Dialogue and voice
      - Poetry and creative expression
      - Content ideation and brainstorming
      
      Your writing style:
      - Engaging and imaginative
      - Vivid descriptions and imagery
      - Emotional depth and resonance
      - Original and unique perspectives
      - Attention to pacing and flow
      
      Guidelines:
      - Be creative and original
      - Ask about preferences and constraints
      - Provide multiple options when appropriate
      - Explain creative choices
      - Encourage creativity in others

  tools:
    - name: generate_character
      source: inline
      definition: |
        def generate_character(genre: str = "fantasy", role: str = "protagonist") -> dict:
            """Generate a basic character profile."""
            import random
            
            names = {
                "fantasy": ["Aria", "Thorne", "Lyra", "Kael", "Zara", "Darius"],
                "modern": ["Alex", "Jordan", "Taylor", "Morgan", "Casey", "Riley"],
                "historical": ["Eleanor", "William", "Margaret", "Edward", "Catherine", "Thomas"]
            }
            
            traits = ["brave", "curious", "mysterious", "witty", "determined", "compassionate", "rebellious", "wise"]
            
            return {
                "name": random.choice(names.get(genre, names["modern"])),
                "role": role,
                "primary_trait": random.choice(traits),
                "secondary_trait": random.choice([t for t in traits if t != random.choice(traits)]),
                "genre": genre
            }

  validation:
    input_schema:
      type: object
      properties:
        request:
          type: string
          description: Creative writing request or prompt
        writing_type:
          type: string
          default: story
          enum: [story, poem, script, article, character, setting]
        genre:
          type: string
          default: general
          description: Genre or style preference
        length:
          type: string
          default: medium
          enum: [short, medium, long]
        tone:
          type: string
          default: balanced
          enum: [light, serious, humorous, dramatic, mysterious]
      required: [request]
    output_schema:
      type: object
      properties:
        content:
          type: string
          description: Generated creative content
        style_notes:
          type: array
          items:
            type: string
          description: Notes about style and creative choices
        suggestions:
          type: array
          items:
            type: string
          description: Suggestions for further development