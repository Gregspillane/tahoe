generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
  previewFeatures      = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["agent_engine", "public"]
}

model Session {
  id         String    @id @default(uuid())
  app_name   String
  user_id    String
  session_id String    @unique
  state      Json?
  metadata   Json?
  backend    String    @default("memory")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  expires_at DateTime?

  executions Execution[]
  audit_logs AuditLog[]

  @@index([user_id])
  @@index([app_name])
  @@index([created_at])
  @@index([backend])
  @@index([user_id, app_name]) // Composite index for user-app queries
  @@index([backend, created_at]) // Composite index for backend filtering with date
  @@schema("agent_engine")
}

model Execution {
  id            String    @id @default(uuid())
  session_id    String
  agent_name    String
  agent_type    String
  workflow_name String?
  input_data    Json
  output_data   Json?
  status        String // pending, running, completed, failed
  error_message String?
  started_at    DateTime  @default(now())
  completed_at  DateTime?
  duration_ms   Int?
  token_usage   Json?

  session    Session    @relation(fields: [session_id], references: [id], onDelete: Cascade)
  results    Result[]
  audit_logs AuditLog[]

  @@index([session_id])
  @@index([agent_name])
  @@index([status])
  @@index([started_at])
  @@index([session_id, status]) // Composite index for session status queries
  @@index([agent_name, started_at]) // Composite index for agent performance queries
  @@schema("agent_engine")
}

model Result {
  id           String   @id @default(uuid())
  execution_id String
  result_type  String // intermediate, final, error
  data         Json
  metadata     Json?
  created_at   DateTime @default(now())

  execution Execution @relation(fields: [execution_id], references: [id], onDelete: Cascade)

  @@index([execution_id])
  @@index([result_type])
  @@schema("agent_engine")
}

model AuditLog {
  id           String    @id @default(uuid())
  session_id   String?
  execution_id String?
  user_id      String
  action       String
  resource     String
  details      Json?
  ip_address   String?
  user_agent   String?
  created_at   DateTime  @default(now())

  session   Session?   @relation(fields: [session_id], references: [id], onDelete: Cascade)
  execution Execution? @relation(fields: [execution_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([action])
  @@index([created_at])
  @@schema("agent_engine")
}

model ToolRegistry {
  id           String   @id @default(uuid())
  name         String   @unique
  version      String
  description  String?
  specification Json
  function_def String?
  categories   String[]
  dependencies String[]
  active       Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@index([name])
  @@index([categories])
  @@index([active])
  @@schema("agent_engine")
}

model ConfigurationVersion {
  id            String   @id @default(uuid())
  type          String // agent, workflow, tool, model
  name          String
  version       String
  specification Json
  active        Boolean  @default(true)
  created_by    String
  created_at    DateTime @default(now())

  @@unique([type, name, version])
  @@index([type])
  @@index([name])
  @@index([active])
  @@schema("agent_engine")
}