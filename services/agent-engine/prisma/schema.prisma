// Prisma schema for agent-engine service
// Database: PostgreSQL with agent_engine schema

generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Agent Configuration
model AgentTemplate {
  id              String   @id @default(uuid())
  name            String   @unique
  description     String?
  type            String   // "specialist" | "coordinator" | "aggregator"
  model           String   @default("gemini-2.0-flash")
  modelConfig     Json     // temperature, max_tokens, etc.
  capabilities    String[] // Array of capability tags
  tools           String[] // Tool identifiers
  triggerRules    Json     // Conditions for activation
  systemPrompt    String?  // Custom system prompt
  userPrompt      String?  // Custom user prompt template
  version         Int      @default(1)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  scorecardAgents ScorecardAgent[]
  
  @@map("agent_templates")
}

// Scorecard Configuration
model Scorecard {
  id              String   @id @default(uuid())
  name            String
  description     String?
  portfolioId     String
  version         Int      @default(1)
  requirements    Json     // Detailed requirement structure
  thresholds      Json     // Pass/fail/review thresholds
  aggregationRules Json    // How to combine agent results
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  portfolio       Portfolio @relation(fields: [portfolioId], references: [id])
  scorecardAgents ScorecardAgent[]
  analyses        Analysis[]
  
  @@map("scorecards")
}

// Agent-Scorecard Mapping
model ScorecardAgent {
  id            String   @id @default(uuid())
  scorecardId   String
  agentId       String
  weight        Float    @default(1.0)
  isRequired    Boolean  @default(true)
  configuration Json?    // Override configuration
  executionOrder Int?    // For sequential execution
  
  // Relations
  scorecard     Scorecard     @relation(fields: [scorecardId], references: [id])
  agent         AgentTemplate @relation(fields: [agentId], references: [id])
  
  @@unique([scorecardId, agentId])
  @@map("scorecard_agents")
}

// Portfolio Configuration
model Portfolio {
  id            String   @id @default(uuid())
  organizationId String
  name          String
  description   String?
  configuration Json     // Portfolio-specific settings
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  scorecards    Scorecard[]
  analyses      Analysis[]
  
  @@map("portfolios")
}

// Analysis Results
model Analysis {
  id              String   @id @default(uuid())
  interactionId   String
  portfolioId     String
  scorecardId     String
  status          String   // "pending" | "processing" | "complete" | "failed"
  overallScore    Float?
  confidence      Float?
  results         Json?    // Detailed analysis results
  agentOutputs    Json?    // Individual agent outputs
  violations      Json[]   // Detected violations
  recommendations Json[]   // Suggested actions
  metadata        Json?    // Execution metadata
  executionTime   Float?   // In seconds
  traceId         String?  // Distributed tracing ID
  createdAt       DateTime @default(now())
  completedAt     DateTime?
  
  // Relations
  portfolio       Portfolio @relation(fields: [portfolioId], references: [id])
  scorecard       Scorecard @relation(fields: [scorecardId], references: [id])
  
  @@index([interactionId])
  @@index([portfolioId])
  @@index([status])
  @@index([createdAt])
  @@map("analyses")
}

// Tool Configuration
model Tool {
  id            String   @id @default(uuid())
  name          String   @unique
  description   String?
  type          String   // "function" | "api" | "database"
  configuration Json     // Tool-specific config
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("tools")
}

// Model Provider Configuration
model ModelProvider {
  id            String   @id @default(uuid())
  name          String   @unique // "gemini" | "openai" | "anthropic"
  baseUrl       String?
  apiKeyEnvVar  String   // Environment variable name
  models        Json     // Available models and configurations
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("model_providers")
}